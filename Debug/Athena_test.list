
Athena_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001788  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001934  08001934  00002934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800197c  0800197c  00003004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800197c  0800197c  00003004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800197c  0800197c  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800197c  0800197c  0000297c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001980  08001980  00002980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08001984  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08001988  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08001988  00003020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d94  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001307  00000000  00000000  00008dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058d  00000000  00000000  0000a850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a59  00000000  00000000  0000addd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c63  00000000  00000000  0002d836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be88f  00000000  00000000  00034499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f2d28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001de0  00000000  00000000  000f2d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000f4b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800191c 	.word	0x0800191c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	0800191c 	.word	0x0800191c

080001ec <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	f003 0320 	and.w	r3, r3, #32
 80001fc:	2b20      	cmp	r3, #32
 80001fe:	d101      	bne.n	8000204 <LL_USART_IsActiveFlag_RXNE+0x18>
 8000200:	2301      	movs	r3, #1
 8000202:	e000      	b.n	8000206 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8000204:	2300      	movs	r3, #0
}
 8000206:	4618      	mov	r0, r3
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr

08000212 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8000212:	b480      	push	{r7}
 8000214:	b083      	sub	sp, #12
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800021e:	b29b      	uxth	r3, r3
 8000220:	b2db      	uxtb	r3, r3
}
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
	...

08000230 <UART1_Receive>:
    }
  }
  return ch;
}

uint8_t UART1_Receive(){
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    while (!LL_USART_IsActiveFlag_RXNE(USART1));
 8000234:	bf00      	nop
 8000236:	4806      	ldr	r0, [pc, #24]	@ (8000250 <UART1_Receive+0x20>)
 8000238:	f7ff ffd8 	bl	80001ec <LL_USART_IsActiveFlag_RXNE>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <UART1_Receive+0x6>
    return LL_USART_ReceiveData8(USART1);
 8000242:	4803      	ldr	r0, [pc, #12]	@ (8000250 <UART1_Receive+0x20>)
 8000244:	f7ff ffe5 	bl	8000212 <LL_USART_ReceiveData8>
 8000248:	4603      	mov	r3, r0
}
 800024a:	4618      	mov	r0, r3
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40013800 	.word	0x40013800

08000254 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800025c:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800025e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000260:	4907      	ldr	r1, [pc, #28]	@ (8000280 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000268:	4b05      	ldr	r3, [pc, #20]	@ (8000280 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800026a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	4013      	ands	r3, r2
 8000270:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000272:	68fb      	ldr	r3, [r7, #12]
}
 8000274:	bf00      	nop
 8000276:	3714      	adds	r7, #20
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000

08000284 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	683a      	ldr	r2, [r7, #0]
 8000292:	619a      	str	r2, [r3, #24]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	463b      	mov	r3, r7
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
 80002b2:	611a      	str	r2, [r3, #16]
 80002b4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80002b6:	2001      	movs	r0, #1
 80002b8:	f7ff ffcc 	bl	8000254 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80002bc:	2002      	movs	r0, #2
 80002be:	f7ff ffc9 	bl	8000254 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_9);
 80002c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002c6:	480b      	ldr	r0, [pc, #44]	@ (80002f4 <MX_GPIO_Init+0x54>)
 80002c8:	f7ff ffdc 	bl	8000284 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80002cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80002d0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002d2:	2301      	movs	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e2:	463b      	mov	r3, r7
 80002e4:	4619      	mov	r1, r3
 80002e6:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <MX_GPIO_Init+0x54>)
 80002e8:	f000 fd7c 	bl	8000de4 <LL_GPIO_Init>

}
 80002ec:	bf00      	nop
 80002ee:	3718      	adds	r7, #24
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	48000400 	.word	0x48000400

080002f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000308:	4b0c      	ldr	r3, [pc, #48]	@ (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000314:	4013      	ands	r3, r2
 8000316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800032a:	4a04      	ldr	r2, [pc, #16]	@ (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	60d3      	str	r3, [r2, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000344:	4b04      	ldr	r3, [pc, #16]	@ (8000358 <__NVIC_GetPriorityGrouping+0x18>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	f003 0307 	and.w	r3, r3, #7
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	6039      	str	r1, [r7, #0]
 8000366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036c:	2b00      	cmp	r3, #0
 800036e:	db0a      	blt.n	8000386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	b2da      	uxtb	r2, r3
 8000374:	490c      	ldr	r1, [pc, #48]	@ (80003a8 <__NVIC_SetPriority+0x4c>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	0112      	lsls	r2, r2, #4
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	440b      	add	r3, r1
 8000380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000384:	e00a      	b.n	800039c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	b2da      	uxtb	r2, r3
 800038a:	4908      	ldr	r1, [pc, #32]	@ (80003ac <__NVIC_SetPriority+0x50>)
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	f003 030f 	and.w	r3, r3, #15
 8000392:	3b04      	subs	r3, #4
 8000394:	0112      	lsls	r2, r2, #4
 8000396:	b2d2      	uxtb	r2, r2
 8000398:	440b      	add	r3, r1
 800039a:	761a      	strb	r2, [r3, #24]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	e000e100 	.word	0xe000e100
 80003ac:	e000ed00 	.word	0xe000ed00

080003b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b089      	sub	sp, #36	@ 0x24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f003 0307 	and.w	r3, r3, #7
 80003c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	f1c3 0307 	rsb	r3, r3, #7
 80003ca:	2b04      	cmp	r3, #4
 80003cc:	bf28      	it	cs
 80003ce:	2304      	movcs	r3, #4
 80003d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	3304      	adds	r3, #4
 80003d6:	2b06      	cmp	r3, #6
 80003d8:	d902      	bls.n	80003e0 <NVIC_EncodePriority+0x30>
 80003da:	69fb      	ldr	r3, [r7, #28]
 80003dc:	3b03      	subs	r3, #3
 80003de:	e000      	b.n	80003e2 <NVIC_EncodePriority+0x32>
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e4:	f04f 32ff 	mov.w	r2, #4294967295
 80003e8:	69bb      	ldr	r3, [r7, #24]
 80003ea:	fa02 f303 	lsl.w	r3, r2, r3
 80003ee:	43da      	mvns	r2, r3
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	401a      	ands	r2, r3
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003f8:	f04f 31ff 	mov.w	r1, #4294967295
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	43d9      	mvns	r1, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000408:	4313      	orrs	r3, r2
         );
}
 800040a:	4618      	mov	r0, r3
 800040c:	3724      	adds	r7, #36	@ 0x24
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
	...

08000418 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800041c:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <LL_RCC_MSI_Enable+0x1c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <LL_RCC_MSI_Enable+0x1c>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800043c:	4b06      	ldr	r3, [pc, #24]	@ (8000458 <LL_RCC_MSI_IsReady+0x20>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f003 0302 	and.w	r3, r3, #2
 8000444:	2b02      	cmp	r3, #2
 8000446:	d101      	bne.n	800044c <LL_RCC_MSI_IsReady+0x14>
 8000448:	2301      	movs	r3, #1
 800044a:	e000      	b.n	800044e <LL_RCC_MSI_IsReady+0x16>
 800044c:	2300      	movs	r3, #0
}
 800044e:	4618      	mov	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000

0800045c <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6013      	str	r3, [r2, #0]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <LL_RCC_MSI_SetRange+0x24>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800048c:	4904      	ldr	r1, [pc, #16]	@ (80004a0 <LL_RCC_MSI_SetRange+0x24>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	600b      	str	r3, [r1, #0]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80004ac:	4b07      	ldr	r3, [pc, #28]	@ (80004cc <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	021b      	lsls	r3, r3, #8
 80004b8:	4904      	ldr	r1, [pc, #16]	@ (80004cc <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80004ba:	4313      	orrs	r3, r2
 80004bc:	604b      	str	r3, [r1, #4]
}
 80004be:	bf00      	nop
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000

080004d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <LL_RCC_SetSysClkSource+0x24>)
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	f023 0203 	bic.w	r2, r3, #3
 80004e0:	4904      	ldr	r1, [pc, #16]	@ (80004f4 <LL_RCC_SetSysClkSource+0x24>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	608b      	str	r3, [r1, #8]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <LL_RCC_GetSysClkSource+0x18>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	f003 030c 	and.w	r3, r3, #12
}
 8000504:	4618      	mov	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <LL_RCC_SetAHBPrescaler+0x24>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000524:	4904      	ldr	r1, [pc, #16]	@ (8000538 <LL_RCC_SetAHBPrescaler+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	608b      	str	r3, [r1, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000

0800053c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000544:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800054c:	4904      	ldr	r1, [pc, #16]	@ (8000560 <LL_RCC_SetAPB1Prescaler+0x24>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4313      	orrs	r3, r2
 8000552:	608b      	str	r3, [r1, #8]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000

08000564 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000564:	b480      	push	{r7}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800056c:	4b06      	ldr	r3, [pc, #24]	@ (8000588 <LL_RCC_SetAPB2Prescaler+0x24>)
 800056e:	689b      	ldr	r3, [r3, #8]
 8000570:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000574:	4904      	ldr	r1, [pc, #16]	@ (8000588 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4313      	orrs	r3, r2
 800057a:	608b      	str	r3, [r1, #8]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40021000 	.word	0x40021000

0800058c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000594:	4b08      	ldr	r3, [pc, #32]	@ (80005b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000596:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000598:	4907      	ldr	r1, [pc, #28]	@ (80005b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4313      	orrs	r3, r2
 800059e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80005a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4013      	ands	r3, r2
 80005a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005aa:	68fb      	ldr	r3, [r7, #12]
}
 80005ac:	bf00      	nop
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000

080005bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005c8:	4907      	ldr	r1, [pc, #28]	@ (80005e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4313      	orrs	r3, r2
 80005ce:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80005d2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4013      	ands	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <LL_FLASH_SetLatency+0x24>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 0207 	bic.w	r2, r3, #7
 80005fc:	4904      	ldr	r1, [pc, #16]	@ (8000610 <LL_FLASH_SetLatency+0x24>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	600b      	str	r3, [r1, #0]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40022000 	.word	0x40022000

08000614 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000618:	4b04      	ldr	r3, [pc, #16]	@ (800062c <LL_FLASH_GetLatency+0x18>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f003 0307 	and.w	r3, r3, #7
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40022000 	.word	0x40022000

08000630 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8000640:	4904      	ldr	r1, [pc, #16]	@ (8000654 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4313      	orrs	r3, r2
 8000646:	600b      	str	r3, [r1, #0]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	40007000 	.word	0x40007000

08000658 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 800065c:	4b07      	ldr	r3, [pc, #28]	@ (800067c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000668:	d101      	bne.n	800066e <LL_PWR_IsActiveFlag_VOS+0x16>
 800066a:	2301      	movs	r3, #1
 800066c:	e000      	b.n	8000670 <LL_PWR_IsActiveFlag_VOS+0x18>
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40007000 	.word	0x40007000

08000680 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	4013      	ands	r3, r2
 8000696:	041a      	lsls	r2, r3, #16
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	43d9      	mvns	r1, r3
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	400b      	ands	r3, r1
 80006a0:	431a      	orrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	619a      	str	r2, [r3, #24]
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
	...

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f7ff ff7e 	bl	80005bc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006c0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80006c4:	f7ff ff62 	bl	800058c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f7ff fe15 	bl	80002f8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006ce:	f7ff fe37 	bl	8000340 <__NVIC_GetPriorityGrouping>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2200      	movs	r2, #0
 80006d6:	210f      	movs	r1, #15
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fe69 	bl	80003b0 <NVIC_EncodePriority>
 80006de:	4603      	mov	r3, r0
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295
 80006e6:	f7ff fe39 	bl	800035c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f81d 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f7ff fdd7 	bl	80002a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f2:	f000 f99f 	bl	8000a34 <MX_USART1_UART_Init>
//	  DEBUG_PRINTF("this is a test: %s \n","hello world");
//	  uint8_t str[3];
//	  for(int i=0;i<3;i++)str[i] = i+1;
//	  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
	    uint8_t data;
	    data = UART1_Receive();
 80006f6:	f7ff fd9b 	bl	8000230 <UART1_Receive>
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
	    while(data--)
 80006fe:	e007      	b.n	8000710 <main+0x5c>
	    {
	    	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_9);
 8000700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000704:	4807      	ldr	r0, [pc, #28]	@ (8000724 <main+0x70>)
 8000706:	f7ff ffbb 	bl	8000680 <LL_GPIO_TogglePin>

	        LL_mDelay(100);
 800070a:	2064      	movs	r0, #100	@ 0x64
 800070c:	f001 f8aa 	bl	8001864 <LL_mDelay>
	    while(data--)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	1e5a      	subs	r2, r3, #1
 8000714:	71fa      	strb	r2, [r7, #7]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d1f2      	bne.n	8000700 <main+0x4c>
	    }

	    LL_mDelay(2000);
 800071a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800071e:	f001 f8a1 	bl	8001864 <LL_mDelay>
  {
 8000722:	e7e8      	b.n	80006f6 <main+0x42>
 8000724:	48000400 	.word	0x48000400

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800072c:	2000      	movs	r0, #0
 800072e:	f7ff ff5d 	bl	80005ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000732:	bf00      	nop
 8000734:	f7ff ff6e 	bl	8000614 <LL_FLASH_GetLatency>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d1fa      	bne.n	8000734 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800073e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000742:	f7ff ff75 	bl	8000630 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000746:	bf00      	nop
 8000748:	f7ff ff86 	bl	8000658 <LL_PWR_IsActiveFlag_VOS>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1fa      	bne.n	8000748 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8000752:	f7ff fe61 	bl	8000418 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000756:	bf00      	nop
 8000758:	f7ff fe6e 	bl	8000438 <LL_RCC_MSI_IsReady>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d1fa      	bne.n	8000758 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000762:	f7ff fe7b 	bl	800045c <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000766:	2060      	movs	r0, #96	@ 0x60
 8000768:	f7ff fe88 	bl	800047c <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800076c:	2000      	movs	r0, #0
 800076e:	f7ff fe99 	bl	80004a4 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff feac 	bl	80004d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8000778:	bf00      	nop
 800077a:	f7ff febd 	bl	80004f8 <LL_RCC_GetSysClkSource>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1fa      	bne.n	800077a <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fec5 	bl	8000514 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff fed6 	bl	800053c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000790:	2000      	movs	r0, #0
 8000792:	f7ff fee7 	bl	8000564 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8000796:	4804      	ldr	r0, [pc, #16]	@ (80007a8 <SystemClock_Config+0x80>)
 8000798:	f001 f856 	bl	8001848 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 800079c:	4802      	ldr	r0, [pc, #8]	@ (80007a8 <SystemClock_Config+0x80>)
 800079e:	f001 f889 	bl	80018b4 <LL_SetSystemCoreClock>
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	003d0900 	.word	0x003d0900

080007ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <NMI_Handler+0x4>

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <MemManage_Handler+0x4>

080007c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <SystemInit+0x20>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <SystemInit+0x20>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000830:	bf00      	nop
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <__NVIC_GetPriorityGrouping>:
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <__NVIC_GetPriorityGrouping+0x18>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	f003 0307 	and.w	r3, r3, #7
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <__NVIC_EnableIRQ>:
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	db0b      	blt.n	8000886 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	f003 021f 	and.w	r2, r3, #31
 8000874:	4907      	ldr	r1, [pc, #28]	@ (8000894 <__NVIC_EnableIRQ+0x38>)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	095b      	lsrs	r3, r3, #5
 800087c:	2001      	movs	r0, #1
 800087e:	fa00 f202 	lsl.w	r2, r0, r2
 8000882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	@ (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	@ (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	@ 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	@ 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800095c:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <LL_RCC_SetUSARTClockSource+0x30>)
 800095e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	0c1b      	lsrs	r3, r3, #16
 8000966:	43db      	mvns	r3, r3
 8000968:	401a      	ands	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	b29b      	uxth	r3, r3
 800096e:	4905      	ldr	r1, [pc, #20]	@ (8000984 <LL_RCC_SetUSARTClockSource+0x30>)
 8000970:	4313      	orrs	r3, r2
 8000972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <LL_AHB2_GRP1_EnableClock>:
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000990:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000994:	4907      	ldr	r1, [pc, #28]	@ (80009b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4313      	orrs	r3, r2
 800099a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800099c:	4b05      	ldr	r3, [pc, #20]	@ (80009b4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800099e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4013      	ands	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000

080009b8 <LL_APB2_GRP1_EnableClock>:
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009c4:	4907      	ldr	r1, [pc, #28]	@ (80009e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4013      	ands	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_USART_Enable>:
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f043 0201 	orr.w	r2, r3, #1
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_USART_ConfigAsyncMode>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	609a      	str	r2, [r3, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08e      	sub	sp, #56	@ 0x38
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]
 8000a4c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
 8000a5c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000a5e:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000a62:	f7ff ff77 	bl	8000954 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000a66:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000a6a:	f7ff ffa5 	bl	80009b8 <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff ff8a 	bl	8000988 <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000a74:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a96:	f000 f9a5 	bl	8000de4 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000a9a:	f7ff fed1 	bl	8000840 <__NVIC_GetPriorityGrouping>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff21 	bl	80008ec <NVIC_EncodePriority>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4619      	mov	r1, r3
 8000aae:	2025      	movs	r0, #37	@ 0x25
 8000ab0:	f7ff fef2 	bl	8000898 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000ab4:	2025      	movs	r0, #37	@ 0x25
 8000ab6:	f7ff fed1 	bl	800085c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000aba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000abe:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000acc:	230c      	movs	r3, #12
 8000ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	@ (8000af8 <MX_USART1_UART_Init+0xc4>)
 8000ae0:	f000 fe1c 	bl	800171c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_USART1_UART_Init+0xc4>)
 8000ae6:	f7ff ff8f 	bl	8000a08 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000aea:	4803      	ldr	r0, [pc, #12]	@ (8000af8 <MX_USART1_UART_Init+0xc4>)
 8000aec:	f7ff ff7c 	bl	80009e8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3738      	adds	r7, #56	@ 0x38
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40013800 	.word	0x40013800

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff fe8c 	bl	800081c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f000 fed3 	bl	80018d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fdc1 	bl	80006b4 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000b40:	08001984 	.word	0x08001984
  ldr r2, =_sbss
 8000b44:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000b48:	20000020 	.word	0x20000020

08000b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_2_IRQHandler>

08000b4e <LL_GPIO_SetPinMode>:
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b08b      	sub	sp, #44	@ 0x2c
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa93 f3a3 	rbit	r3, r3
 8000b68:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000b74:	2320      	movs	r3, #32
 8000b76:	e003      	b.n	8000b80 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	fab3 f383 	clz	r3, r3
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	2103      	movs	r1, #3
 8000b84:	fa01 f303 	lsl.w	r3, r1, r3
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	fa93 f3a3 	rbit	r3, r3
 8000b96:	61fb      	str	r3, [r7, #28]
  return result;
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000ba2:	2320      	movs	r3, #32
 8000ba4:	e003      	b.n	8000bae <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba8:	fab3 f383 	clz	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	372c      	adds	r7, #44	@ 0x2c
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_GPIO_SetPinOutputType>:
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	401a      	ands	r2, r3
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	fb01 f303 	mul.w	r3, r1, r3
 8000be6:	431a      	orrs	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	605a      	str	r2, [r3, #4]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_GPIO_SetPinSpeed>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b08b      	sub	sp, #44	@ 0x2c
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	689a      	ldr	r2, [r3, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa93 f3a3 	rbit	r3, r3
 8000c12:	613b      	str	r3, [r7, #16]
  return result;
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8000c1e:	2320      	movs	r3, #32
 8000c20:	e003      	b.n	8000c2a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	fab3 f383 	clz	r3, r3
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43db      	mvns	r3, r3
 8000c34:	401a      	ands	r2, r3
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c3a:	6a3b      	ldr	r3, [r7, #32]
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	61fb      	str	r3, [r7, #28]
  return result;
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d101      	bne.n	8000c50 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8000c4c:	2320      	movs	r3, #32
 8000c4e:	e003      	b.n	8000c58 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	fab3 f383 	clz	r3, r3
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	431a      	orrs	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	609a      	str	r2, [r3, #8]
}
 8000c66:	bf00      	nop
 8000c68:	372c      	adds	r7, #44	@ 0x2c
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <LL_GPIO_SetPinPull>:
{
 8000c72:	b480      	push	{r7}
 8000c74:	b08b      	sub	sp, #44	@ 0x2c
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	60f8      	str	r0, [r7, #12]
 8000c7a:	60b9      	str	r1, [r7, #8]
 8000c7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa93 f3a3 	rbit	r3, r3
 8000c8c:	613b      	str	r3, [r7, #16]
  return result;
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d101      	bne.n	8000c9c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000c98:	2320      	movs	r3, #32
 8000c9a:	e003      	b.n	8000ca4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	fab3 f383 	clz	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2103      	movs	r1, #3
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	401a      	ands	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	fa93 f3a3 	rbit	r3, r3
 8000cba:	61fb      	str	r3, [r7, #28]
  return result;
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000cc6:	2320      	movs	r3, #32
 8000cc8:	e003      	b.n	8000cd2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	fab3 f383 	clz	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	60da      	str	r2, [r3, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	372c      	adds	r7, #44	@ 0x2c
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <LL_GPIO_SetAFPin_0_7>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b08b      	sub	sp, #44	@ 0x2c
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6a1a      	ldr	r2, [r3, #32]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa93 f3a3 	rbit	r3, r3
 8000d06:	613b      	str	r3, [r7, #16]
  return result;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8000d12:	2320      	movs	r3, #32
 8000d14:	e003      	b.n	8000d1e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	fab3 f383 	clz	r3, r3
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	210f      	movs	r1, #15
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	401a      	ands	r2, r3
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	fa93 f3a3 	rbit	r3, r3
 8000d34:	61fb      	str	r3, [r7, #28]
  return result;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d101      	bne.n	8000d44 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8000d40:	2320      	movs	r3, #32
 8000d42:	e003      	b.n	8000d4c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8000d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d46:	fab3 f383 	clz	r3, r3
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	431a      	orrs	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	621a      	str	r2, [r3, #32]
}
 8000d5a:	bf00      	nop
 8000d5c:	372c      	adds	r7, #44	@ 0x2c
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <LL_GPIO_SetAFPin_8_15>:
{
 8000d66:	b480      	push	{r7}
 8000d68:	b08b      	sub	sp, #44	@ 0x2c
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	0a1b      	lsrs	r3, r3, #8
 8000d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa93 f3a3 	rbit	r3, r3
 8000d82:	613b      	str	r3, [r7, #16]
  return result;
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8000d8e:	2320      	movs	r3, #32
 8000d90:	e003      	b.n	8000d9a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	401a      	ands	r2, r3
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	fa93 f3a3 	rbit	r3, r3
 8000db2:	61fb      	str	r3, [r7, #28]
  return result;
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d101      	bne.n	8000dc2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	e003      	b.n	8000dca <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	fab3 f383 	clz	r3, r3
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000dd8:	bf00      	nop
 8000dda:	372c      	adds	r7, #44	@ 0x2c
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	60fb      	str	r3, [r7, #12]
  return result;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <LL_GPIO_Init+0x26>
    return 32U;
 8000e06:	2320      	movs	r3, #32
 8000e08:	e003      	b.n	8000e12 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	fab3 f383 	clz	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000e14:	e048      	b.n	8000ea8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d03a      	beq.n	8000ea2 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d003      	beq.n	8000e3c <LL_GPIO_Init+0x58>
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	d10e      	bne.n	8000e5a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	461a      	mov	r2, r3
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff fed7 	bl	8000bf8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	6819      	ldr	r1, [r3, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	461a      	mov	r2, r3
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff feb7 	bl	8000bc8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	69b9      	ldr	r1, [r7, #24]
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff05 	bl	8000c72 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d111      	bne.n	8000e94 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2bff      	cmp	r3, #255	@ 0xff
 8000e74:	d807      	bhi.n	8000e86 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	69b9      	ldr	r1, [r7, #24]
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ff34 	bl	8000cec <LL_GPIO_SetAFPin_0_7>
 8000e84:	e006      	b.n	8000e94 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	69b9      	ldr	r1, [r7, #24]
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff69 	bl	8000d66 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff fe56 	bl	8000b4e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1af      	bne.n	8000e16 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <LL_RCC_HSI_IsReady>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <LL_RCC_HSI_IsReady+0x24>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ed0:	d101      	bne.n	8000ed6 <LL_RCC_HSI_IsReady+0x16>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <LL_RCC_HSI_IsReady+0x18>
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <LL_RCC_LSE_IsReady>:
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000eec:	4b07      	ldr	r3, [pc, #28]	@ (8000f0c <LL_RCC_LSE_IsReady+0x24>)
 8000eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d101      	bne.n	8000efe <LL_RCC_LSE_IsReady+0x16>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <LL_RCC_LSE_IsReady+0x18>
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0308 	and.w	r3, r3, #8
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d101      	bne.n	8000f24 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	40021000 	.word	0x40021000

08000f34 <LL_RCC_MSI_GetRange>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <LL_RCC_MSI_GetRange+0x18>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000

08000f50 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8000f54:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8000f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f5a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40021000 	.word	0x40021000

08000f6c <LL_RCC_GetSysClkSource>:
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <LL_RCC_GetSysClkSource+0x18>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 030c 	and.w	r3, r3, #12
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <LL_RCC_GetAHBPrescaler>:
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <LL_RCC_GetAHBPrescaler+0x18>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <LL_RCC_GetAPB1Prescaler>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <LL_RCC_GetAPB1Prescaler+0x18>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <LL_RCC_GetAPB2Prescaler>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	@ (8000fd8 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <LL_RCC_GetUSARTClockSource+0x24>)
 8000fe6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	401a      	ands	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	4313      	orrs	r3, r2
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	40021000 	.word	0x40021000

08001004 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <LL_RCC_GetUARTClockSource+0x24>)
 800100e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	401a      	ands	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	4313      	orrs	r3, r2
}
 800101c:	4618      	mov	r0, r3
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000

0800102c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <LL_RCC_PLL_GetMainSource+0x18>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	f003 0303 	and.w	r3, r3, #3
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <LL_RCC_PLL_GetN+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40021000 	.word	0x40021000

08001064 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <LL_RCC_PLL_GetR+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <LL_RCC_PLL_GetDivider+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40021000 	.word	0x40021000

0800109c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d137      	bne.n	800111e <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff94 	bl	8000fdc <LL_RCC_GetUSARTClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	f200 80b3 	bhi.w	8001226 <LL_RCC_GetUSARTClockFreq+0x18a>
 80010c0:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80010c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c6:	bf00      	nop
 80010c8:	08001107 	.word	0x08001107
 80010cc:	080010d9 	.word	0x080010d9
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080010f3 	.word	0x080010f3
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80010d8:	f000 f956 	bl	8001388 <RCC_GetSystemClockFreq>
 80010dc:	60f8      	str	r0, [r7, #12]
        break;
 80010de:	e0b3      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80010e0:	f7ff feee 	bl	8000ec0 <LL_RCC_HSI_IsReady>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 809f 	beq.w	800122a <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80010ec:	4b59      	ldr	r3, [pc, #356]	@ (8001254 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80010ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80010f0:	e09b      	b.n	800122a <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80010f2:	f7ff fef9 	bl	8000ee8 <LL_RCC_LSE_IsReady>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 8098 	beq.w	800122e <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80010fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001102:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001104:	e093      	b.n	800122e <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001106:	f000 f93f 	bl	8001388 <RCC_GetSystemClockFreq>
 800110a:	4603      	mov	r3, r0
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f9cb 	bl	80014a8 <RCC_GetHCLKClockFreq>
 8001112:	4603      	mov	r3, r0
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f9f1 	bl	80014fc <RCC_GetPCLK2ClockFreq>
 800111a:	60f8      	str	r0, [r7, #12]
        break;
 800111c:	e094      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0c      	cmp	r3, #12
 8001122:	d146      	bne.n	80011b2 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff59 	bl	8000fdc <LL_RCC_GetUSARTClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8001130:	2b0c      	cmp	r3, #12
 8001132:	d87e      	bhi.n	8001232 <LL_RCC_GetUSARTClockFreq+0x196>
 8001134:	a201      	add	r2, pc, #4	@ (adr r2, 800113c <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113a:	bf00      	nop
 800113c:	0800119b 	.word	0x0800119b
 8001140:	08001233 	.word	0x08001233
 8001144:	08001233 	.word	0x08001233
 8001148:	08001233 	.word	0x08001233
 800114c:	08001171 	.word	0x08001171
 8001150:	08001233 	.word	0x08001233
 8001154:	08001233 	.word	0x08001233
 8001158:	08001233 	.word	0x08001233
 800115c:	08001179 	.word	0x08001179
 8001160:	08001233 	.word	0x08001233
 8001164:	08001233 	.word	0x08001233
 8001168:	08001233 	.word	0x08001233
 800116c:	08001189 	.word	0x08001189
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001170:	f000 f90a 	bl	8001388 <RCC_GetSystemClockFreq>
 8001174:	60f8      	str	r0, [r7, #12]
        break;
 8001176:	e067      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001178:	f7ff fea2 	bl	8000ec0 <LL_RCC_HSI_IsReady>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d059      	beq.n	8001236 <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 8001182:	4b34      	ldr	r3, [pc, #208]	@ (8001254 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001184:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001186:	e056      	b.n	8001236 <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001188:	f7ff feae 	bl	8000ee8 <LL_RCC_LSE_IsReady>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d053      	beq.n	800123a <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 8001192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001196:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001198:	e04f      	b.n	800123a <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800119a:	f000 f8f5 	bl	8001388 <RCC_GetSystemClockFreq>
 800119e:	4603      	mov	r3, r0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f981 	bl	80014a8 <RCC_GetHCLKClockFreq>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f993 	bl	80014d4 <RCC_GetPCLK1ClockFreq>
 80011ae:	60f8      	str	r0, [r7, #12]
        break;
 80011b0:	e04a      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b30      	cmp	r3, #48	@ 0x30
 80011b6:	d147      	bne.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff0f 	bl	8000fdc <LL_RCC_GetUSARTClockSource>
 80011be:	4603      	mov	r3, r0
 80011c0:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80011c4:	d01a      	beq.n	80011fc <LL_RCC_GetUSARTClockFreq+0x160>
 80011c6:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80011ca:	d838      	bhi.n	800123e <LL_RCC_GetUSARTClockFreq+0x1a2>
 80011cc:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00c      	beq.n	80011ec <LL_RCC_GetUSARTClockFreq+0x150>
 80011d2:	4a21      	ldr	r2, [pc, #132]	@ (8001258 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d832      	bhi.n	800123e <LL_RCC_GetUSARTClockFreq+0x1a2>
 80011d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80011dc:	d017      	beq.n	800120e <LL_RCC_GetUSARTClockFreq+0x172>
 80011de:	4a1f      	ldr	r2, [pc, #124]	@ (800125c <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d12c      	bne.n	800123e <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80011e4:	f000 f8d0 	bl	8001388 <RCC_GetSystemClockFreq>
 80011e8:	60f8      	str	r0, [r7, #12]
          break;
 80011ea:	e02d      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80011ec:	f7ff fe68 	bl	8000ec0 <LL_RCC_HSI_IsReady>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d025      	beq.n	8001242 <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80011f8:	60fb      	str	r3, [r7, #12]
          }
          break;
 80011fa:	e022      	b.n	8001242 <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80011fc:	f7ff fe74 	bl	8000ee8 <LL_RCC_LSE_IsReady>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01f      	beq.n	8001246 <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 8001206:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800120a:	60fb      	str	r3, [r7, #12]
          }
          break;
 800120c:	e01b      	b.n	8001246 <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800120e:	f000 f8bb 	bl	8001388 <RCC_GetSystemClockFreq>
 8001212:	4603      	mov	r3, r0
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f947 	bl	80014a8 <RCC_GetHCLKClockFreq>
 800121a:	4603      	mov	r3, r0
 800121c:	4618      	mov	r0, r3
 800121e:	f000 f959 	bl	80014d4 <RCC_GetPCLK1ClockFreq>
 8001222:	60f8      	str	r0, [r7, #12]
          break;
 8001224:	e010      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001226:	bf00      	nop
 8001228:	e00e      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800122a:	bf00      	nop
 800122c:	e00c      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800122e:	bf00      	nop
 8001230:	e00a      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001232:	bf00      	nop
 8001234:	e008      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8001236:	bf00      	nop
 8001238:	e006      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800123a:	bf00      	nop
 800123c:	e004      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 800123e:	bf00      	nop
 8001240:	e002      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001242:	bf00      	nop
 8001244:	e000      	b.n	8001248 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 8001246:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	00f42400 	.word	0x00f42400
 8001258:	00300020 	.word	0x00300020
 800125c:	00300010 	.word	0x00300010

08001260 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2bc0      	cmp	r3, #192	@ 0xc0
 8001270:	d13b      	bne.n	80012ea <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fec6 	bl	8001004 <LL_RCC_GetUARTClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800127e:	d01a      	beq.n	80012b6 <LL_RCC_GetUARTClockFreq+0x56>
 8001280:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8001284:	d82c      	bhi.n	80012e0 <LL_RCC_GetUARTClockFreq+0x80>
 8001286:	4a3b      	ldr	r2, [pc, #236]	@ (8001374 <LL_RCC_GetUARTClockFreq+0x114>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00c      	beq.n	80012a6 <LL_RCC_GetUARTClockFreq+0x46>
 800128c:	4a39      	ldr	r2, [pc, #228]	@ (8001374 <LL_RCC_GetUARTClockFreq+0x114>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d826      	bhi.n	80012e0 <LL_RCC_GetUARTClockFreq+0x80>
 8001292:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001296:	d017      	beq.n	80012c8 <LL_RCC_GetUARTClockFreq+0x68>
 8001298:	4a37      	ldr	r2, [pc, #220]	@ (8001378 <LL_RCC_GetUARTClockFreq+0x118>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d120      	bne.n	80012e0 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800129e:	f000 f873 	bl	8001388 <RCC_GetSystemClockFreq>
 80012a2:	60f8      	str	r0, [r7, #12]
        break;
 80012a4:	e021      	b.n	80012ea <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80012a6:	f7ff fe0b 	bl	8000ec0 <LL_RCC_HSI_IsReady>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d019      	beq.n	80012e4 <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 80012b0:	4b32      	ldr	r3, [pc, #200]	@ (800137c <LL_RCC_GetUARTClockFreq+0x11c>)
 80012b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012b4:	e016      	b.n	80012e4 <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80012b6:	f7ff fe17 	bl	8000ee8 <LL_RCC_LSE_IsReady>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d013      	beq.n	80012e8 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 80012c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80012c6:	e00f      	b.n	80012e8 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80012c8:	f000 f85e 	bl	8001388 <RCC_GetSystemClockFreq>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f8ea 	bl	80014a8 <RCC_GetHCLKClockFreq>
 80012d4:	4603      	mov	r3, r0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f8fc 	bl	80014d4 <RCC_GetPCLK1ClockFreq>
 80012dc:	60f8      	str	r0, [r7, #12]
        break;
 80012de:	e004      	b.n	80012ea <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 80012e0:	bf00      	nop
 80012e2:	e002      	b.n	80012ea <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80012e4:	bf00      	nop
 80012e6:	e000      	b.n	80012ea <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80012e8:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012f0:	d13b      	bne.n	800136a <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fe86 	bl	8001004 <LL_RCC_GetUARTClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80012fe:	d01a      	beq.n	8001336 <LL_RCC_GetUARTClockFreq+0xd6>
 8001300:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8001304:	d82c      	bhi.n	8001360 <LL_RCC_GetUARTClockFreq+0x100>
 8001306:	4a1e      	ldr	r2, [pc, #120]	@ (8001380 <LL_RCC_GetUARTClockFreq+0x120>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00c      	beq.n	8001326 <LL_RCC_GetUARTClockFreq+0xc6>
 800130c:	4a1c      	ldr	r2, [pc, #112]	@ (8001380 <LL_RCC_GetUARTClockFreq+0x120>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d826      	bhi.n	8001360 <LL_RCC_GetUARTClockFreq+0x100>
 8001312:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001316:	d017      	beq.n	8001348 <LL_RCC_GetUARTClockFreq+0xe8>
 8001318:	4a1a      	ldr	r2, [pc, #104]	@ (8001384 <LL_RCC_GetUARTClockFreq+0x124>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d120      	bne.n	8001360 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 800131e:	f000 f833 	bl	8001388 <RCC_GetSystemClockFreq>
 8001322:	60f8      	str	r0, [r7, #12]
        break;
 8001324:	e021      	b.n	800136a <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001326:	f7ff fdcb 	bl	8000ec0 <LL_RCC_HSI_IsReady>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d019      	beq.n	8001364 <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <LL_RCC_GetUARTClockFreq+0x11c>)
 8001332:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001334:	e016      	b.n	8001364 <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001336:	f7ff fdd7 	bl	8000ee8 <LL_RCC_LSE_IsReady>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8001340:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001344:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001346:	e00f      	b.n	8001368 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001348:	f000 f81e 	bl	8001388 <RCC_GetSystemClockFreq>
 800134c:	4603      	mov	r3, r0
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f8aa 	bl	80014a8 <RCC_GetHCLKClockFreq>
 8001354:	4603      	mov	r3, r0
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f8bc 	bl	80014d4 <RCC_GetPCLK1ClockFreq>
 800135c:	60f8      	str	r0, [r7, #12]
        break;
 800135e:	e004      	b.n	800136a <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8001360:	bf00      	nop
 8001362:	e002      	b.n	800136a <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8001368:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	00c00080 	.word	0x00c00080
 8001378:	00c00040 	.word	0x00c00040
 800137c:	00f42400 	.word	0x00f42400
 8001380:	03000200 	.word	0x03000200
 8001384:	03000100 	.word	0x03000100

08001388 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800138e:	f7ff fded 	bl	8000f6c <LL_RCC_GetSysClkSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b0c      	cmp	r3, #12
 8001396:	d851      	bhi.n	800143c <RCC_GetSystemClockFreq+0xb4>
 8001398:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <RCC_GetSystemClockFreq+0x18>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	0800143d 	.word	0x0800143d
 80013a8:	0800143d 	.word	0x0800143d
 80013ac:	0800143d 	.word	0x0800143d
 80013b0:	08001429 	.word	0x08001429
 80013b4:	0800143d 	.word	0x0800143d
 80013b8:	0800143d 	.word	0x0800143d
 80013bc:	0800143d 	.word	0x0800143d
 80013c0:	0800142f 	.word	0x0800142f
 80013c4:	0800143d 	.word	0x0800143d
 80013c8:	0800143d 	.word	0x0800143d
 80013cc:	0800143d 	.word	0x0800143d
 80013d0:	08001435 	.word	0x08001435
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80013d4:	f7ff fd9c 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d111      	bne.n	8001402 <RCC_GetSystemClockFreq+0x7a>
 80013de:	f7ff fd97 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <RCC_GetSystemClockFreq+0x6a>
 80013e8:	f7ff fda4 	bl	8000f34 <LL_RCC_MSI_GetRange>
 80013ec:	4603      	mov	r3, r0
 80013ee:	0a1b      	lsrs	r3, r3, #8
 80013f0:	e003      	b.n	80013fa <RCC_GetSystemClockFreq+0x72>
 80013f2:	f7ff fdad 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 80013f6:	4603      	mov	r3, r0
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	4a28      	ldr	r2, [pc, #160]	@ (800149c <RCC_GetSystemClockFreq+0x114>)
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	e010      	b.n	8001424 <RCC_GetSystemClockFreq+0x9c>
 8001402:	f7ff fd85 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <RCC_GetSystemClockFreq+0x8e>
 800140c:	f7ff fd92 	bl	8000f34 <LL_RCC_MSI_GetRange>
 8001410:	4603      	mov	r3, r0
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	e003      	b.n	800141e <RCC_GetSystemClockFreq+0x96>
 8001416:	f7ff fd9b 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 800141a:	4603      	mov	r3, r0
 800141c:	091b      	lsrs	r3, r3, #4
 800141e:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <RCC_GetSystemClockFreq+0x114>)
 8001420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001424:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001426:	e033      	b.n	8001490 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001428:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <RCC_GetSystemClockFreq+0x118>)
 800142a:	607b      	str	r3, [r7, #4]
      break;
 800142c:	e030      	b.n	8001490 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <RCC_GetSystemClockFreq+0x11c>)
 8001430:	607b      	str	r3, [r7, #4]
      break;
 8001432:	e02d      	b.n	8001490 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001434:	f000 f876 	bl	8001524 <RCC_PLL_GetFreqDomain_SYS>
 8001438:	6078      	str	r0, [r7, #4]
      break;
 800143a:	e029      	b.n	8001490 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800143c:	f7ff fd68 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d111      	bne.n	800146a <RCC_GetSystemClockFreq+0xe2>
 8001446:	f7ff fd63 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <RCC_GetSystemClockFreq+0xd2>
 8001450:	f7ff fd70 	bl	8000f34 <LL_RCC_MSI_GetRange>
 8001454:	4603      	mov	r3, r0
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	e003      	b.n	8001462 <RCC_GetSystemClockFreq+0xda>
 800145a:	f7ff fd79 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 800145e:	4603      	mov	r3, r0
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	4a0e      	ldr	r2, [pc, #56]	@ (800149c <RCC_GetSystemClockFreq+0x114>)
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	e010      	b.n	800148c <RCC_GetSystemClockFreq+0x104>
 800146a:	f7ff fd51 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d004      	beq.n	800147e <RCC_GetSystemClockFreq+0xf6>
 8001474:	f7ff fd5e 	bl	8000f34 <LL_RCC_MSI_GetRange>
 8001478:	4603      	mov	r3, r0
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	e003      	b.n	8001486 <RCC_GetSystemClockFreq+0xfe>
 800147e:	f7ff fd67 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 8001482:	4603      	mov	r3, r0
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <RCC_GetSystemClockFreq+0x114>)
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800148e:	bf00      	nop
  }

  return frequency;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800194c 	.word	0x0800194c
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	007a1200 	.word	0x007a1200

080014a8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80014b0:	f7ff fd6a 	bl	8000f88 <LL_RCC_GetAHBPrescaler>
 80014b4:	4603      	mov	r3, r0
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	4a04      	ldr	r2, [pc, #16]	@ (80014d0 <RCC_GetHCLKClockFreq+0x28>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	40d3      	lsrs	r3, r2
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08001934 	.word	0x08001934

080014d4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80014dc:	f7ff fd62 	bl	8000fa4 <LL_RCC_GetAPB1Prescaler>
 80014e0:	4603      	mov	r3, r0
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	4a04      	ldr	r2, [pc, #16]	@ (80014f8 <RCC_GetPCLK1ClockFreq+0x24>)
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	461a      	mov	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	40d3      	lsrs	r3, r2
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	08001944 	.word	0x08001944

080014fc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001504:	f7ff fd5c 	bl	8000fc0 <LL_RCC_GetAPB2Prescaler>
 8001508:	4603      	mov	r3, r0
 800150a:	0adb      	lsrs	r3, r3, #11
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <RCC_GetPCLK2ClockFreq+0x24>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	40d3      	lsrs	r3, r2
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	08001944 	.word	0x08001944

08001524 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800152a:	f7ff fd7f 	bl	800102c <LL_RCC_PLL_GetMainSource>
 800152e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b03      	cmp	r3, #3
 8001534:	d036      	beq.n	80015a4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	2b03      	cmp	r3, #3
 800153a:	d836      	bhi.n	80015aa <RCC_PLL_GetFreqDomain_SYS+0x86>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d003      	beq.n	800154a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d02a      	beq.n	800159e <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8001548:	e02f      	b.n	80015aa <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800154a:	f7ff fce1 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8001554:	f7ff fcdc 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d004      	beq.n	8001568 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800155e:	f7ff fce9 	bl	8000f34 <LL_RCC_MSI_GetRange>
 8001562:	4603      	mov	r3, r0
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	e003      	b.n	8001570 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8001568:	f7ff fcf2 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 800156c:	4603      	mov	r3, r0
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	4a2f      	ldr	r2, [pc, #188]	@ (8001630 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001576:	e010      	b.n	800159a <RCC_PLL_GetFreqDomain_SYS+0x76>
 8001578:	f7ff fcca 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <RCC_PLL_GetFreqDomain_SYS+0x68>
 8001582:	f7ff fcd7 	bl	8000f34 <LL_RCC_MSI_GetRange>
 8001586:	4603      	mov	r3, r0
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	e003      	b.n	8001594 <RCC_PLL_GetFreqDomain_SYS+0x70>
 800158c:	f7ff fce0 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 8001590:	4603      	mov	r3, r0
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	4a26      	ldr	r2, [pc, #152]	@ (8001630 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8001596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800159a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800159c:	e02f      	b.n	80015fe <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80015a0:	607b      	str	r3, [r7, #4]
      break;
 80015a2:	e02c      	b.n	80015fe <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80015a4:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80015a6:	607b      	str	r3, [r7, #4]
      break;
 80015a8:	e029      	b.n	80015fe <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80015aa:	f7ff fcb1 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d111      	bne.n	80015d8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80015b4:	f7ff fcac 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d004      	beq.n	80015c8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80015be:	f7ff fcb9 	bl	8000f34 <LL_RCC_MSI_GetRange>
 80015c2:	4603      	mov	r3, r0
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	e003      	b.n	80015d0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80015c8:	f7ff fcc2 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 80015cc:	4603      	mov	r3, r0
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	4a17      	ldr	r2, [pc, #92]	@ (8001630 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	e010      	b.n	80015fa <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80015d8:	f7ff fc9a 	bl	8000f10 <LL_RCC_MSI_IsEnabledRangeSelect>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80015e2:	f7ff fca7 	bl	8000f34 <LL_RCC_MSI_GetRange>
 80015e6:	4603      	mov	r3, r0
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	e003      	b.n	80015f4 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80015ec:	f7ff fcb0 	bl	8000f50 <LL_RCC_MSI_GetRangeAfterStandby>
 80015f0:	4603      	mov	r3, r0
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80015f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015fa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80015fc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80015fe:	f7ff fd3f 	bl	8001080 <LL_RCC_PLL_GetDivider>
 8001602:	4603      	mov	r3, r0
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	3301      	adds	r3, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	fbb2 f4f3 	udiv	r4, r2, r3
 800160e:	f7ff fd1b 	bl	8001048 <LL_RCC_PLL_GetN>
 8001612:	4603      	mov	r3, r0
 8001614:	fb03 f404 	mul.w	r4, r3, r4
 8001618:	f7ff fd24 	bl	8001064 <LL_RCC_PLL_GetR>
 800161c:	4603      	mov	r3, r0
 800161e:	0e5b      	lsrs	r3, r3, #25
 8001620:	3301      	adds	r3, #1
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001628:	4618      	mov	r0, r3
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	0800194c 	.word	0x0800194c
 8001634:	00f42400 	.word	0x00f42400
 8001638:	007a1200 	.word	0x007a1200

0800163c <LL_USART_IsEnabled>:
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <LL_USART_IsEnabled+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_USART_IsEnabled+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_USART_SetStopBitsLength>:
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	605a      	str	r2, [r3, #4]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_USART_SetHWFlowCtrl>:
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	609a      	str	r2, [r3, #8]
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_USART_SetBaudRate>:
{
 80016ae:	b480      	push	{r7}
 80016b0:	b087      	sub	sp, #28
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80016c2:	d11a      	bne.n	80016fa <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	005a      	lsls	r2, r3, #1
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	441a      	add	r2, r3
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	085b      	lsrs	r3, r3, #1
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f003 0307 	and.w	r3, r3, #7
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	60da      	str	r2, [r3, #12]
}
 80016f8:	e00a      	b.n	8001710 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	085a      	lsrs	r2, r3, #1
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	441a      	add	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	b29b      	uxth	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	60da      	str	r2, [r3, #12]
}
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800172a:	2300      	movs	r3, #0
 800172c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ff84 	bl	800163c <LL_USART_IsEnabled>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d15b      	bne.n	80017f2 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <LL_USART_Init+0xe0>)
 8001740:	4013      	ands	r3, r2
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	6851      	ldr	r1, [r2, #4]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	4311      	orrs	r1, r2
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	6912      	ldr	r2, [r2, #16]
 8001750:	4311      	orrs	r1, r2
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	6992      	ldr	r2, [r2, #24]
 8001756:	430a      	orrs	r2, r1
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4619      	mov	r1, r3
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff ff7c 	bl	8001662 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff89 	bl	8001688 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a21      	ldr	r2, [pc, #132]	@ (8001800 <LL_USART_Init+0xe4>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d104      	bne.n	8001788 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800177e:	2003      	movs	r0, #3
 8001780:	f7ff fc8c 	bl	800109c <LL_RCC_GetUSARTClockFreq>
 8001784:	60b8      	str	r0, [r7, #8]
 8001786:	e023      	b.n	80017d0 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <LL_USART_Init+0xe8>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d104      	bne.n	800179a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8001790:	200c      	movs	r0, #12
 8001792:	f7ff fc83 	bl	800109c <LL_RCC_GetUSARTClockFreq>
 8001796:	60b8      	str	r0, [r7, #8]
 8001798:	e01a      	b.n	80017d0 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <LL_USART_Init+0xec>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d104      	bne.n	80017ac <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80017a2:	2030      	movs	r0, #48	@ 0x30
 80017a4:	f7ff fc7a 	bl	800109c <LL_RCC_GetUSARTClockFreq>
 80017a8:	60b8      	str	r0, [r7, #8]
 80017aa:	e011      	b.n	80017d0 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a17      	ldr	r2, [pc, #92]	@ (800180c <LL_USART_Init+0xf0>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d104      	bne.n	80017be <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80017b4:	20c0      	movs	r0, #192	@ 0xc0
 80017b6:	f7ff fd53 	bl	8001260 <LL_RCC_GetUARTClockFreq>
 80017ba:	60b8      	str	r0, [r7, #8]
 80017bc:	e008      	b.n	80017d0 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <LL_USART_Init+0xf4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d104      	bne.n	80017d0 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80017c6:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80017ca:	f7ff fd49 	bl	8001260 <LL_RCC_GetUARTClockFreq>
 80017ce:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00d      	beq.n	80017f2 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80017de:	2300      	movs	r3, #0
 80017e0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ff5e 	bl	80016ae <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	efff69f3 	.word	0xefff69f3
 8001800:	40013800 	.word	0x40013800
 8001804:	40004400 	.word	0x40004400
 8001808:	40004800 	.word	0x40004800
 800180c:	40004c00 	.word	0x40004c00
 8001810:	40005000 	.word	0x40005000

08001814 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	4a07      	ldr	r2, [pc, #28]	@ (8001844 <LL_InitTick+0x30>)
 8001828:	3b01      	subs	r3, #1
 800182a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <LL_InitTick+0x30>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <LL_InitTick+0x30>)
 8001834:	2205      	movs	r2, #5
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000e010 	.word	0xe000e010

08001848 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001850:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffdd 	bl	8001814 <LL_InitTick>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800186c:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <LL_mDelay+0x4c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001876:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187e:	d00c      	beq.n	800189a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3301      	adds	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8001886:	e008      	b.n	800189a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001888:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <LL_mDelay+0x4c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3b01      	subs	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f3      	bne.n	8001888 <LL_mDelay+0x24>
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80018bc:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <LL_SetSystemCoreClock+0x1c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000

080018d4 <__libc_init_array>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	4d0d      	ldr	r5, [pc, #52]	@ (800190c <__libc_init_array+0x38>)
 80018d8:	4c0d      	ldr	r4, [pc, #52]	@ (8001910 <__libc_init_array+0x3c>)
 80018da:	1b64      	subs	r4, r4, r5
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	2600      	movs	r6, #0
 80018e0:	42a6      	cmp	r6, r4
 80018e2:	d109      	bne.n	80018f8 <__libc_init_array+0x24>
 80018e4:	4d0b      	ldr	r5, [pc, #44]	@ (8001914 <__libc_init_array+0x40>)
 80018e6:	4c0c      	ldr	r4, [pc, #48]	@ (8001918 <__libc_init_array+0x44>)
 80018e8:	f000 f818 	bl	800191c <_init>
 80018ec:	1b64      	subs	r4, r4, r5
 80018ee:	10a4      	asrs	r4, r4, #2
 80018f0:	2600      	movs	r6, #0
 80018f2:	42a6      	cmp	r6, r4
 80018f4:	d105      	bne.n	8001902 <__libc_init_array+0x2e>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018fc:	4798      	blx	r3
 80018fe:	3601      	adds	r6, #1
 8001900:	e7ee      	b.n	80018e0 <__libc_init_array+0xc>
 8001902:	f855 3b04 	ldr.w	r3, [r5], #4
 8001906:	4798      	blx	r3
 8001908:	3601      	adds	r6, #1
 800190a:	e7f2      	b.n	80018f2 <__libc_init_array+0x1e>
 800190c:	0800197c 	.word	0x0800197c
 8001910:	0800197c 	.word	0x0800197c
 8001914:	0800197c 	.word	0x0800197c
 8001918:	08001980 	.word	0x08001980

0800191c <_init>:
 800191c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800191e:	bf00      	nop
 8001920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001922:	bc08      	pop	{r3}
 8001924:	469e      	mov	lr, r3
 8001926:	4770      	bx	lr

08001928 <_fini>:
 8001928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800192a:	bf00      	nop
 800192c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800192e:	bc08      	pop	{r3}
 8001930:	469e      	mov	lr, r3
 8001932:	4770      	bx	lr
