
Athena_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08002d2c  08002d2c  00003d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec4  08002ec4  00004004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ec4  08002ec4  00003ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ecc  08002ecc  00004004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00003ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08002ed4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000004  08002ed8  00004004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002ed8  000040a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d05  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012a0  00000000  00000000  00009d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058e  00000000  00000000  0000b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a59  00000000  00000000  0000bcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067c3  00000000  00000000  0002e747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be8be  00000000  00000000  00034f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f37c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fd8  00000000  00000000  000f380c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008f  00000000  00000000  000f57e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000004 	.word	0x20000004
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d14 	.word	0x08002d14

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000008 	.word	0x20000008
 80001e8:	08002d14 	.word	0x08002d14

080001ec <__aeabi_d2f>:
 80001ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80001f4:	bf24      	itt	cs
 80001f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80001fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80001fe:	d90d      	bls.n	800021c <__aeabi_d2f+0x30>
 8000200:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000204:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000208:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800020c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000210:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000214:	bf08      	it	eq
 8000216:	f020 0001 	biceq.w	r0, r0, #1
 800021a:	4770      	bx	lr
 800021c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000220:	d121      	bne.n	8000266 <__aeabi_d2f+0x7a>
 8000222:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000226:	bfbc      	itt	lt
 8000228:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800022c:	4770      	bxlt	lr
 800022e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000232:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000236:	f1c2 0218 	rsb	r2, r2, #24
 800023a:	f1c2 0c20 	rsb	ip, r2, #32
 800023e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000242:	fa20 f002 	lsr.w	r0, r0, r2
 8000246:	bf18      	it	ne
 8000248:	f040 0001 	orrne.w	r0, r0, #1
 800024c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000250:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000254:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000258:	ea40 000c 	orr.w	r0, r0, ip
 800025c:	fa23 f302 	lsr.w	r3, r3, r2
 8000260:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000264:	e7cc      	b.n	8000200 <__aeabi_d2f+0x14>
 8000266:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800026a:	d107      	bne.n	800027c <__aeabi_d2f+0x90>
 800026c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000270:	bf1e      	ittt	ne
 8000272:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000276:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800027a:	4770      	bxne	lr
 800027c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000280:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000284:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a0:	f000 bae6 	b.w	8000870 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f83a 	bl	8000324 <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__aeabi_f2lz>:
 80002bc:	ee07 0a90 	vmov	s15, r0
 80002c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80002c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002c8:	d401      	bmi.n	80002ce <__aeabi_f2lz+0x12>
 80002ca:	f000 b80b 	b.w	80002e4 <__aeabi_f2ulz>
 80002ce:	eef1 7a67 	vneg.f32	s15, s15
 80002d2:	b508      	push	{r3, lr}
 80002d4:	ee17 0a90 	vmov	r0, s15
 80002d8:	f000 f804 	bl	80002e4 <__aeabi_f2ulz>
 80002dc:	4240      	negs	r0, r0
 80002de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e2:	bd08      	pop	{r3, pc}

080002e4 <__aeabi_f2ulz>:
 80002e4:	b5d0      	push	{r4, r6, r7, lr}
 80002e6:	f000 fc29 	bl	8000b3c <__aeabi_f2d>
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <__aeabi_f2ulz+0x38>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	4606      	mov	r6, r0
 80002f0:	460f      	mov	r7, r1
 80002f2:	f000 f993 	bl	800061c <__aeabi_dmul>
 80002f6:	f000 fc79 	bl	8000bec <__aeabi_d2uiz>
 80002fa:	4604      	mov	r4, r0
 80002fc:	f000 fbfc 	bl	8000af8 <__aeabi_ui2d>
 8000300:	4b07      	ldr	r3, [pc, #28]	@ (8000320 <__aeabi_f2ulz+0x3c>)
 8000302:	2200      	movs	r2, #0
 8000304:	f000 f98a 	bl	800061c <__aeabi_dmul>
 8000308:	4602      	mov	r2, r0
 800030a:	460b      	mov	r3, r1
 800030c:	4630      	mov	r0, r6
 800030e:	4639      	mov	r1, r7
 8000310:	f000 fab4 	bl	800087c <__aeabi_dsub>
 8000314:	f000 fc6a 	bl	8000bec <__aeabi_d2uiz>
 8000318:	4621      	mov	r1, r4
 800031a:	bdd0      	pop	{r4, r6, r7, pc}
 800031c:	3df00000 	.word	0x3df00000
 8000320:	41f00000 	.word	0x41f00000

08000324 <__udivmoddi4>:
 8000324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000328:	9d08      	ldr	r5, [sp, #32]
 800032a:	468e      	mov	lr, r1
 800032c:	4604      	mov	r4, r0
 800032e:	4688      	mov	r8, r1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d14a      	bne.n	80003ca <__udivmoddi4+0xa6>
 8000334:	428a      	cmp	r2, r1
 8000336:	4617      	mov	r7, r2
 8000338:	d962      	bls.n	8000400 <__udivmoddi4+0xdc>
 800033a:	fab2 f682 	clz	r6, r2
 800033e:	b14e      	cbz	r6, 8000354 <__udivmoddi4+0x30>
 8000340:	f1c6 0320 	rsb	r3, r6, #32
 8000344:	fa01 f806 	lsl.w	r8, r1, r6
 8000348:	fa20 f303 	lsr.w	r3, r0, r3
 800034c:	40b7      	lsls	r7, r6
 800034e:	ea43 0808 	orr.w	r8, r3, r8
 8000352:	40b4      	lsls	r4, r6
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f fc87 	uxth.w	ip, r7
 800035c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000360:	0c23      	lsrs	r3, r4, #16
 8000362:	fb0e 8811 	mls	r8, lr, r1, r8
 8000366:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800036a:	fb01 f20c 	mul.w	r2, r1, ip
 800036e:	429a      	cmp	r2, r3
 8000370:	d909      	bls.n	8000386 <__udivmoddi4+0x62>
 8000372:	18fb      	adds	r3, r7, r3
 8000374:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000378:	f080 80ea 	bcs.w	8000550 <__udivmoddi4+0x22c>
 800037c:	429a      	cmp	r2, r3
 800037e:	f240 80e7 	bls.w	8000550 <__udivmoddi4+0x22c>
 8000382:	3902      	subs	r1, #2
 8000384:	443b      	add	r3, r7
 8000386:	1a9a      	subs	r2, r3, r2
 8000388:	b2a3      	uxth	r3, r4
 800038a:	fbb2 f0fe 	udiv	r0, r2, lr
 800038e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000396:	fb00 fc0c 	mul.w	ip, r0, ip
 800039a:	459c      	cmp	ip, r3
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0x8e>
 800039e:	18fb      	adds	r3, r7, r3
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a4:	f080 80d6 	bcs.w	8000554 <__udivmoddi4+0x230>
 80003a8:	459c      	cmp	ip, r3
 80003aa:	f240 80d3 	bls.w	8000554 <__udivmoddi4+0x230>
 80003ae:	443b      	add	r3, r7
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b6:	eba3 030c 	sub.w	r3, r3, ip
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa2>
 80003be:	40f3      	lsrs	r3, r6
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xb6>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb0>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa2>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x14c>
 80003e2:	4573      	cmp	r3, lr
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xc8>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 8105 	bhi.w	80005f6 <__udivmoddi4+0x2d2>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb6e 0203 	sbc.w	r2, lr, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	4690      	mov	r8, r2
 80003f6:	2d00      	cmp	r5, #0
 80003f8:	d0e5      	beq.n	80003c6 <__udivmoddi4+0xa2>
 80003fa:	e9c5 4800 	strd	r4, r8, [r5]
 80003fe:	e7e2      	b.n	80003c6 <__udivmoddi4+0xa2>
 8000400:	2a00      	cmp	r2, #0
 8000402:	f000 8090 	beq.w	8000526 <__udivmoddi4+0x202>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	2e00      	cmp	r6, #0
 800040c:	f040 80a4 	bne.w	8000558 <__udivmoddi4+0x234>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	0c03      	lsrs	r3, r0, #16
 8000414:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000418:	b280      	uxth	r0, r0
 800041a:	b2bc      	uxth	r4, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000422:	fb0e 221c 	mls	r2, lr, ip, r2
 8000426:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800042a:	fb04 f20c 	mul.w	r2, r4, ip
 800042e:	429a      	cmp	r2, r3
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x11e>
 8000432:	18fb      	adds	r3, r7, r3
 8000434:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000438:	d202      	bcs.n	8000440 <__udivmoddi4+0x11c>
 800043a:	429a      	cmp	r2, r3
 800043c:	f200 80e0 	bhi.w	8000600 <__udivmoddi4+0x2dc>
 8000440:	46c4      	mov	ip, r8
 8000442:	1a9b      	subs	r3, r3, r2
 8000444:	fbb3 f2fe 	udiv	r2, r3, lr
 8000448:	fb0e 3312 	mls	r3, lr, r2, r3
 800044c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000450:	fb02 f404 	mul.w	r4, r2, r4
 8000454:	429c      	cmp	r4, r3
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x144>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x142>
 8000460:	429c      	cmp	r4, r3
 8000462:	f200 80ca 	bhi.w	80005fa <__udivmoddi4+0x2d6>
 8000466:	4602      	mov	r2, r0
 8000468:	1b1b      	subs	r3, r3, r4
 800046a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x98>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa0e f401 	lsl.w	r4, lr, r1
 8000480:	fa20 f306 	lsr.w	r3, r0, r6
 8000484:	fa2e fe06 	lsr.w	lr, lr, r6
 8000488:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fa00 f801 	lsl.w	r8, r0, r1
 8000492:	fa1f fc87 	uxth.w	ip, r7
 8000496:	fbbe f0f9 	udiv	r0, lr, r9
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	fb09 ee10 	mls	lr, r9, r0, lr
 80004a0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a4:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d909      	bls.n	80004c4 <__udivmoddi4+0x1a0>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b6:	f080 809c 	bcs.w	80005f2 <__udivmoddi4+0x2ce>
 80004ba:	45a6      	cmp	lr, r4
 80004bc:	f240 8099 	bls.w	80005f2 <__udivmoddi4+0x2ce>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	eba4 040e 	sub.w	r4, r4, lr
 80004c8:	fa1f fe83 	uxth.w	lr, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d8:	fb03 fc0c 	mul.w	ip, r3, ip
 80004dc:	45a4      	cmp	ip, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1ce>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e6:	f080 8082 	bcs.w	80005ee <__udivmoddi4+0x2ca>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d97f      	bls.n	80005ee <__udivmoddi4+0x2ca>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fe:	4564      	cmp	r4, ip
 8000500:	4673      	mov	r3, lr
 8000502:	46e1      	mov	r9, ip
 8000504:	d362      	bcc.n	80005cc <__udivmoddi4+0x2a8>
 8000506:	d05f      	beq.n	80005c8 <__udivmoddi4+0x2a4>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x1fe>
 800050a:	ebb8 0203 	subs.w	r2, r8, r3
 800050e:	eb64 0409 	sbc.w	r4, r4, r9
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	fa22 f301 	lsr.w	r3, r2, r1
 800051a:	431e      	orrs	r6, r3
 800051c:	40cc      	lsrs	r4, r1
 800051e:	e9c5 6400 	strd	r6, r4, [r5]
 8000522:	2100      	movs	r1, #0
 8000524:	e74f      	b.n	80003c6 <__udivmoddi4+0xa2>
 8000526:	fbb1 fcf2 	udiv	ip, r1, r2
 800052a:	0c01      	lsrs	r1, r0, #16
 800052c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000530:	b280      	uxth	r0, r0
 8000532:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000536:	463b      	mov	r3, r7
 8000538:	4638      	mov	r0, r7
 800053a:	463c      	mov	r4, r7
 800053c:	46b8      	mov	r8, r7
 800053e:	46be      	mov	lr, r7
 8000540:	2620      	movs	r6, #32
 8000542:	fbb1 f1f7 	udiv	r1, r1, r7
 8000546:	eba2 0208 	sub.w	r2, r2, r8
 800054a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054e:	e766      	b.n	800041e <__udivmoddi4+0xfa>
 8000550:	4601      	mov	r1, r0
 8000552:	e718      	b.n	8000386 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e72c      	b.n	80003b2 <__udivmoddi4+0x8e>
 8000558:	f1c6 0220 	rsb	r2, r6, #32
 800055c:	fa2e f302 	lsr.w	r3, lr, r2
 8000560:	40b7      	lsls	r7, r6
 8000562:	40b1      	lsls	r1, r6
 8000564:	fa20 f202 	lsr.w	r2, r0, r2
 8000568:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800056c:	430a      	orrs	r2, r1
 800056e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000572:	b2bc      	uxth	r4, r7
 8000574:	fb0e 3318 	mls	r3, lr, r8, r3
 8000578:	0c11      	lsrs	r1, r2, #16
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb08 f904 	mul.w	r9, r8, r4
 8000582:	40b0      	lsls	r0, r6
 8000584:	4589      	cmp	r9, r1
 8000586:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800058a:	b280      	uxth	r0, r0
 800058c:	d93e      	bls.n	800060c <__udivmoddi4+0x2e8>
 800058e:	1879      	adds	r1, r7, r1
 8000590:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000594:	d201      	bcs.n	800059a <__udivmoddi4+0x276>
 8000596:	4589      	cmp	r9, r1
 8000598:	d81f      	bhi.n	80005da <__udivmoddi4+0x2b6>
 800059a:	eba1 0109 	sub.w	r1, r1, r9
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	b292      	uxth	r2, r2
 80005ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b0:	4542      	cmp	r2, r8
 80005b2:	d229      	bcs.n	8000608 <__udivmoddi4+0x2e4>
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005ba:	d2c4      	bcs.n	8000546 <__udivmoddi4+0x222>
 80005bc:	4542      	cmp	r2, r8
 80005be:	d2c2      	bcs.n	8000546 <__udivmoddi4+0x222>
 80005c0:	f1a9 0102 	sub.w	r1, r9, #2
 80005c4:	443a      	add	r2, r7
 80005c6:	e7be      	b.n	8000546 <__udivmoddi4+0x222>
 80005c8:	45f0      	cmp	r8, lr
 80005ca:	d29d      	bcs.n	8000508 <__udivmoddi4+0x1e4>
 80005cc:	ebbe 0302 	subs.w	r3, lr, r2
 80005d0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d4:	3801      	subs	r0, #1
 80005d6:	46e1      	mov	r9, ip
 80005d8:	e796      	b.n	8000508 <__udivmoddi4+0x1e4>
 80005da:	eba7 0909 	sub.w	r9, r7, r9
 80005de:	4449      	add	r1, r9
 80005e0:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7db      	b.n	80005a6 <__udivmoddi4+0x282>
 80005ee:	4673      	mov	r3, lr
 80005f0:	e77f      	b.n	80004f2 <__udivmoddi4+0x1ce>
 80005f2:	4650      	mov	r0, sl
 80005f4:	e766      	b.n	80004c4 <__udivmoddi4+0x1a0>
 80005f6:	4608      	mov	r0, r1
 80005f8:	e6fd      	b.n	80003f6 <__udivmoddi4+0xd2>
 80005fa:	443b      	add	r3, r7
 80005fc:	3a02      	subs	r2, #2
 80005fe:	e733      	b.n	8000468 <__udivmoddi4+0x144>
 8000600:	f1ac 0c02 	sub.w	ip, ip, #2
 8000604:	443b      	add	r3, r7
 8000606:	e71c      	b.n	8000442 <__udivmoddi4+0x11e>
 8000608:	4649      	mov	r1, r9
 800060a:	e79c      	b.n	8000546 <__udivmoddi4+0x222>
 800060c:	eba1 0109 	sub.w	r1, r1, r9
 8000610:	46c4      	mov	ip, r8
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fb09 f804 	mul.w	r8, r9, r4
 800061a:	e7c4      	b.n	80005a6 <__udivmoddi4+0x282>

0800061c <__aeabi_dmul>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000622:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062a:	bf1d      	ittte	ne
 800062c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000630:	ea94 0f0c 	teqne	r4, ip
 8000634:	ea95 0f0c 	teqne	r5, ip
 8000638:	f000 f8de 	bleq	80007f8 <__aeabi_dmul+0x1dc>
 800063c:	442c      	add	r4, r5
 800063e:	ea81 0603 	eor.w	r6, r1, r3
 8000642:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000646:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064e:	bf18      	it	ne
 8000650:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800065c:	d038      	beq.n	80006d0 <__aeabi_dmul+0xb4>
 800065e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000662:	f04f 0500 	mov.w	r5, #0
 8000666:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000672:	f04f 0600 	mov.w	r6, #0
 8000676:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067a:	f09c 0f00 	teq	ip, #0
 800067e:	bf18      	it	ne
 8000680:	f04e 0e01 	orrne.w	lr, lr, #1
 8000684:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000688:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800068c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000690:	d204      	bcs.n	800069c <__aeabi_dmul+0x80>
 8000692:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000696:	416d      	adcs	r5, r5
 8000698:	eb46 0606 	adc.w	r6, r6, r6
 800069c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b4:	bf88      	it	hi
 80006b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ba:	d81e      	bhi.n	80006fa <__aeabi_dmul+0xde>
 80006bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c0:	bf08      	it	eq
 80006c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c6:	f150 0000 	adcs.w	r0, r0, #0
 80006ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d4:	ea46 0101 	orr.w	r1, r6, r1
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	ea81 0103 	eor.w	r1, r1, r3
 80006e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e4:	bfc2      	ittt	gt
 80006e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	popgt	{r4, r5, r6, pc}
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f4:	f04f 0e00 	mov.w	lr, #0
 80006f8:	3c01      	subs	r4, #1
 80006fa:	f300 80ab 	bgt.w	8000854 <__aeabi_dmul+0x238>
 80006fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000702:	bfde      	ittt	le
 8000704:	2000      	movle	r0, #0
 8000706:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070a:	bd70      	pople	{r4, r5, r6, pc}
 800070c:	f1c4 0400 	rsb	r4, r4, #0
 8000710:	3c20      	subs	r4, #32
 8000712:	da35      	bge.n	8000780 <__aeabi_dmul+0x164>
 8000714:	340c      	adds	r4, #12
 8000716:	dc1b      	bgt.n	8000750 <__aeabi_dmul+0x134>
 8000718:	f104 0414 	add.w	r4, r4, #20
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f305 	lsl.w	r3, r0, r5
 8000724:	fa20 f004 	lsr.w	r0, r0, r4
 8000728:	fa01 f205 	lsl.w	r2, r1, r5
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000734:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	fa21 f604 	lsr.w	r6, r1, r4
 8000740:	eb42 0106 	adc.w	r1, r2, r6
 8000744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000748:	bf08      	it	eq
 800074a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f1c4 040c 	rsb	r4, r4, #12
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f304 	lsl.w	r3, r0, r4
 800075c:	fa20 f005 	lsr.w	r0, r0, r5
 8000760:	fa01 f204 	lsl.w	r2, r1, r4
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	f141 0100 	adc.w	r1, r1, #0
 8000774:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000778:	bf08      	it	eq
 800077a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f205 	lsl.w	r2, r0, r5
 8000788:	ea4e 0e02 	orr.w	lr, lr, r2
 800078c:	fa20 f304 	lsr.w	r3, r0, r4
 8000790:	fa01 f205 	lsl.w	r2, r1, r5
 8000794:	ea43 0302 	orr.w	r3, r3, r2
 8000798:	fa21 f004 	lsr.w	r0, r1, r4
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	fa21 f204 	lsr.w	r2, r1, r4
 80007a4:	ea20 0002 	bic.w	r0, r0, r2
 80007a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f094 0f00 	teq	r4, #0
 80007bc:	d10f      	bne.n	80007de <__aeabi_dmul+0x1c2>
 80007be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c2:	0040      	lsls	r0, r0, #1
 80007c4:	eb41 0101 	adc.w	r1, r1, r1
 80007c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007cc:	bf08      	it	eq
 80007ce:	3c01      	subeq	r4, #1
 80007d0:	d0f7      	beq.n	80007c2 <__aeabi_dmul+0x1a6>
 80007d2:	ea41 0106 	orr.w	r1, r1, r6
 80007d6:	f095 0f00 	teq	r5, #0
 80007da:	bf18      	it	ne
 80007dc:	4770      	bxne	lr
 80007de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e2:	0052      	lsls	r2, r2, #1
 80007e4:	eb43 0303 	adc.w	r3, r3, r3
 80007e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3d01      	subeq	r5, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1c6>
 80007f2:	ea43 0306 	orr.w	r3, r3, r6
 80007f6:	4770      	bx	lr
 80007f8:	ea94 0f0c 	teq	r4, ip
 80007fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000800:	bf18      	it	ne
 8000802:	ea95 0f0c 	teqne	r5, ip
 8000806:	d00c      	beq.n	8000822 <__aeabi_dmul+0x206>
 8000808:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080c:	bf18      	it	ne
 800080e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000812:	d1d1      	bne.n	80007b8 <__aeabi_dmul+0x19c>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000826:	bf06      	itte	eq
 8000828:	4610      	moveq	r0, r2
 800082a:	4619      	moveq	r1, r3
 800082c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000830:	d019      	beq.n	8000866 <__aeabi_dmul+0x24a>
 8000832:	ea94 0f0c 	teq	r4, ip
 8000836:	d102      	bne.n	800083e <__aeabi_dmul+0x222>
 8000838:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800083c:	d113      	bne.n	8000866 <__aeabi_dmul+0x24a>
 800083e:	ea95 0f0c 	teq	r5, ip
 8000842:	d105      	bne.n	8000850 <__aeabi_dmul+0x234>
 8000844:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000848:	bf1c      	itt	ne
 800084a:	4610      	movne	r0, r2
 800084c:	4619      	movne	r1, r3
 800084e:	d10a      	bne.n	8000866 <__aeabi_dmul+0x24a>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000860:	f04f 0000 	mov.w	r0, #0
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <__aeabi_idiv0>:
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop

08000874 <__aeabi_drsub>:
 8000874:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000878:	e002      	b.n	8000880 <__adddf3>
 800087a:	bf00      	nop

0800087c <__aeabi_dsub>:
 800087c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000880 <__adddf3>:
 8000880:	b530      	push	{r4, r5, lr}
 8000882:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000886:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800088a:	ea94 0f05 	teq	r4, r5
 800088e:	bf08      	it	eq
 8000890:	ea90 0f02 	teqeq	r0, r2
 8000894:	bf1f      	itttt	ne
 8000896:	ea54 0c00 	orrsne.w	ip, r4, r0
 800089a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800089e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80008a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80008a6:	f000 80e2 	beq.w	8000a6e <__adddf3+0x1ee>
 80008aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80008ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80008b2:	bfb8      	it	lt
 80008b4:	426d      	neglt	r5, r5
 80008b6:	dd0c      	ble.n	80008d2 <__adddf3+0x52>
 80008b8:	442c      	add	r4, r5
 80008ba:	ea80 0202 	eor.w	r2, r0, r2
 80008be:	ea81 0303 	eor.w	r3, r1, r3
 80008c2:	ea82 0000 	eor.w	r0, r2, r0
 80008c6:	ea83 0101 	eor.w	r1, r3, r1
 80008ca:	ea80 0202 	eor.w	r2, r0, r2
 80008ce:	ea81 0303 	eor.w	r3, r1, r3
 80008d2:	2d36      	cmp	r5, #54	@ 0x36
 80008d4:	bf88      	it	hi
 80008d6:	bd30      	pophi	{r4, r5, pc}
 80008d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80008e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80008e8:	d002      	beq.n	80008f0 <__adddf3+0x70>
 80008ea:	4240      	negs	r0, r0
 80008ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80008f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80008fc:	d002      	beq.n	8000904 <__adddf3+0x84>
 80008fe:	4252      	negs	r2, r2
 8000900:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000904:	ea94 0f05 	teq	r4, r5
 8000908:	f000 80a7 	beq.w	8000a5a <__adddf3+0x1da>
 800090c:	f1a4 0401 	sub.w	r4, r4, #1
 8000910:	f1d5 0e20 	rsbs	lr, r5, #32
 8000914:	db0d      	blt.n	8000932 <__adddf3+0xb2>
 8000916:	fa02 fc0e 	lsl.w	ip, r2, lr
 800091a:	fa22 f205 	lsr.w	r2, r2, r5
 800091e:	1880      	adds	r0, r0, r2
 8000920:	f141 0100 	adc.w	r1, r1, #0
 8000924:	fa03 f20e 	lsl.w	r2, r3, lr
 8000928:	1880      	adds	r0, r0, r2
 800092a:	fa43 f305 	asr.w	r3, r3, r5
 800092e:	4159      	adcs	r1, r3
 8000930:	e00e      	b.n	8000950 <__adddf3+0xd0>
 8000932:	f1a5 0520 	sub.w	r5, r5, #32
 8000936:	f10e 0e20 	add.w	lr, lr, #32
 800093a:	2a01      	cmp	r2, #1
 800093c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000940:	bf28      	it	cs
 8000942:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000946:	fa43 f305 	asr.w	r3, r3, r5
 800094a:	18c0      	adds	r0, r0, r3
 800094c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000950:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000954:	d507      	bpl.n	8000966 <__adddf3+0xe6>
 8000956:	f04f 0e00 	mov.w	lr, #0
 800095a:	f1dc 0c00 	rsbs	ip, ip, #0
 800095e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000962:	eb6e 0101 	sbc.w	r1, lr, r1
 8000966:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800096a:	d31b      	bcc.n	80009a4 <__adddf3+0x124>
 800096c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000970:	d30c      	bcc.n	800098c <__adddf3+0x10c>
 8000972:	0849      	lsrs	r1, r1, #1
 8000974:	ea5f 0030 	movs.w	r0, r0, rrx
 8000978:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800097c:	f104 0401 	add.w	r4, r4, #1
 8000980:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000984:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000988:	f080 809a 	bcs.w	8000ac0 <__adddf3+0x240>
 800098c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000990:	bf08      	it	eq
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	ea41 0105 	orr.w	r1, r1, r5
 80009a2:	bd30      	pop	{r4, r5, pc}
 80009a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80009a8:	4140      	adcs	r0, r0
 80009aa:	eb41 0101 	adc.w	r1, r1, r1
 80009ae:	3c01      	subs	r4, #1
 80009b0:	bf28      	it	cs
 80009b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80009b6:	d2e9      	bcs.n	800098c <__adddf3+0x10c>
 80009b8:	f091 0f00 	teq	r1, #0
 80009bc:	bf04      	itt	eq
 80009be:	4601      	moveq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	fab1 f381 	clz	r3, r1
 80009c6:	bf08      	it	eq
 80009c8:	3320      	addeq	r3, #32
 80009ca:	f1a3 030b 	sub.w	r3, r3, #11
 80009ce:	f1b3 0220 	subs.w	r2, r3, #32
 80009d2:	da0c      	bge.n	80009ee <__adddf3+0x16e>
 80009d4:	320c      	adds	r2, #12
 80009d6:	dd08      	ble.n	80009ea <__adddf3+0x16a>
 80009d8:	f102 0c14 	add.w	ip, r2, #20
 80009dc:	f1c2 020c 	rsb	r2, r2, #12
 80009e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80009e4:	fa21 f102 	lsr.w	r1, r1, r2
 80009e8:	e00c      	b.n	8000a04 <__adddf3+0x184>
 80009ea:	f102 0214 	add.w	r2, r2, #20
 80009ee:	bfd8      	it	le
 80009f0:	f1c2 0c20 	rsble	ip, r2, #32
 80009f4:	fa01 f102 	lsl.w	r1, r1, r2
 80009f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80009fc:	bfdc      	itt	le
 80009fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000a02:	4090      	lslle	r0, r2
 8000a04:	1ae4      	subs	r4, r4, r3
 8000a06:	bfa2      	ittt	ge
 8000a08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000a0c:	4329      	orrge	r1, r5
 8000a0e:	bd30      	popge	{r4, r5, pc}
 8000a10:	ea6f 0404 	mvn.w	r4, r4
 8000a14:	3c1f      	subs	r4, #31
 8000a16:	da1c      	bge.n	8000a52 <__adddf3+0x1d2>
 8000a18:	340c      	adds	r4, #12
 8000a1a:	dc0e      	bgt.n	8000a3a <__adddf3+0x1ba>
 8000a1c:	f104 0414 	add.w	r4, r4, #20
 8000a20:	f1c4 0220 	rsb	r2, r4, #32
 8000a24:	fa20 f004 	lsr.w	r0, r0, r4
 8000a28:	fa01 f302 	lsl.w	r3, r1, r2
 8000a2c:	ea40 0003 	orr.w	r0, r0, r3
 8000a30:	fa21 f304 	lsr.w	r3, r1, r4
 8000a34:	ea45 0103 	orr.w	r1, r5, r3
 8000a38:	bd30      	pop	{r4, r5, pc}
 8000a3a:	f1c4 040c 	rsb	r4, r4, #12
 8000a3e:	f1c4 0220 	rsb	r2, r4, #32
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	fa01 f304 	lsl.w	r3, r1, r4
 8000a4a:	ea40 0003 	orr.w	r0, r0, r3
 8000a4e:	4629      	mov	r1, r5
 8000a50:	bd30      	pop	{r4, r5, pc}
 8000a52:	fa21 f004 	lsr.w	r0, r1, r4
 8000a56:	4629      	mov	r1, r5
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	f094 0f00 	teq	r4, #0
 8000a5e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000a62:	bf06      	itte	eq
 8000a64:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000a68:	3401      	addeq	r4, #1
 8000a6a:	3d01      	subne	r5, #1
 8000a6c:	e74e      	b.n	800090c <__adddf3+0x8c>
 8000a6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000a72:	bf18      	it	ne
 8000a74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000a78:	d029      	beq.n	8000ace <__adddf3+0x24e>
 8000a7a:	ea94 0f05 	teq	r4, r5
 8000a7e:	bf08      	it	eq
 8000a80:	ea90 0f02 	teqeq	r0, r2
 8000a84:	d005      	beq.n	8000a92 <__adddf3+0x212>
 8000a86:	ea54 0c00 	orrs.w	ip, r4, r0
 8000a8a:	bf04      	itt	eq
 8000a8c:	4619      	moveq	r1, r3
 8000a8e:	4610      	moveq	r0, r2
 8000a90:	bd30      	pop	{r4, r5, pc}
 8000a92:	ea91 0f03 	teq	r1, r3
 8000a96:	bf1e      	ittt	ne
 8000a98:	2100      	movne	r1, #0
 8000a9a:	2000      	movne	r0, #0
 8000a9c:	bd30      	popne	{r4, r5, pc}
 8000a9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000aa2:	d105      	bne.n	8000ab0 <__adddf3+0x230>
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	4149      	adcs	r1, r1
 8000aa8:	bf28      	it	cs
 8000aaa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000aae:	bd30      	pop	{r4, r5, pc}
 8000ab0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000ab4:	bf3c      	itt	cc
 8000ab6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000aba:	bd30      	popcc	{r4, r5, pc}
 8000abc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000ac0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000ac4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	bd30      	pop	{r4, r5, pc}
 8000ace:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ad2:	bf1a      	itte	ne
 8000ad4:	4619      	movne	r1, r3
 8000ad6:	4610      	movne	r0, r2
 8000ad8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000adc:	bf1c      	itt	ne
 8000ade:	460b      	movne	r3, r1
 8000ae0:	4602      	movne	r2, r0
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	bf06      	itte	eq
 8000ae8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000aec:	ea91 0f03 	teqeq	r1, r3
 8000af0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000af4:	bd30      	pop	{r4, r5, pc}
 8000af6:	bf00      	nop

08000af8 <__aeabi_ui2d>:
 8000af8:	f090 0f00 	teq	r0, #0
 8000afc:	bf04      	itt	eq
 8000afe:	2100      	moveq	r1, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	b530      	push	{r4, r5, lr}
 8000b04:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000b08:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000b0c:	f04f 0500 	mov.w	r5, #0
 8000b10:	f04f 0100 	mov.w	r1, #0
 8000b14:	e750      	b.n	80009b8 <__adddf3+0x138>
 8000b16:	bf00      	nop

08000b18 <__aeabi_i2d>:
 8000b18:	f090 0f00 	teq	r0, #0
 8000b1c:	bf04      	itt	eq
 8000b1e:	2100      	moveq	r1, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	b530      	push	{r4, r5, lr}
 8000b24:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000b28:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000b2c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000b30:	bf48      	it	mi
 8000b32:	4240      	negmi	r0, r0
 8000b34:	f04f 0100 	mov.w	r1, #0
 8000b38:	e73e      	b.n	80009b8 <__adddf3+0x138>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_f2d>:
 8000b3c:	0042      	lsls	r2, r0, #1
 8000b3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000b42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b46:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000b50:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000b54:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000b58:	4770      	bxne	lr
 8000b5a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000b5e:	bf08      	it	eq
 8000b60:	4770      	bxeq	lr
 8000b62:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000b66:	bf04      	itt	eq
 8000b68:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000b6c:	4770      	bxeq	lr
 8000b6e:	b530      	push	{r4, r5, lr}
 8000b70:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000b74:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000b78:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000b7c:	e71c      	b.n	80009b8 <__adddf3+0x138>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_ul2d>:
 8000b80:	ea50 0201 	orrs.w	r2, r0, r1
 8000b84:	bf08      	it	eq
 8000b86:	4770      	bxeq	lr
 8000b88:	b530      	push	{r4, r5, lr}
 8000b8a:	f04f 0500 	mov.w	r5, #0
 8000b8e:	e00a      	b.n	8000ba6 <__aeabi_l2d+0x16>

08000b90 <__aeabi_l2d>:
 8000b90:	ea50 0201 	orrs.w	r2, r0, r1
 8000b94:	bf08      	it	eq
 8000b96:	4770      	bxeq	lr
 8000b98:	b530      	push	{r4, r5, lr}
 8000b9a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000b9e:	d502      	bpl.n	8000ba6 <__aeabi_l2d+0x16>
 8000ba0:	4240      	negs	r0, r0
 8000ba2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000baa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000bae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000bb2:	f43f aed8 	beq.w	8000966 <__adddf3+0xe6>
 8000bb6:	f04f 0203 	mov.w	r2, #3
 8000bba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000bbe:	bf18      	it	ne
 8000bc0:	3203      	addne	r2, #3
 8000bc2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000bc6:	bf18      	it	ne
 8000bc8:	3203      	addne	r2, #3
 8000bca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000bce:	f1c2 0320 	rsb	r3, r2, #32
 8000bd2:	fa00 fc03 	lsl.w	ip, r0, r3
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	fa01 fe03 	lsl.w	lr, r1, r3
 8000bde:	ea40 000e 	orr.w	r0, r0, lr
 8000be2:	fa21 f102 	lsr.w	r1, r1, r2
 8000be6:	4414      	add	r4, r2
 8000be8:	e6bd      	b.n	8000966 <__adddf3+0xe6>
 8000bea:	bf00      	nop

08000bec <__aeabi_d2uiz>:
 8000bec:	004a      	lsls	r2, r1, #1
 8000bee:	d211      	bcs.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf4:	d211      	bcs.n	8000c1a <__aeabi_d2uiz+0x2e>
 8000bf6:	d50d      	bpl.n	8000c14 <__aeabi_d2uiz+0x28>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d40e      	bmi.n	8000c20 <__aeabi_d2uiz+0x34>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	4770      	bx	lr
 8000c14:	f04f 0000 	mov.w	r0, #0
 8000c18:	4770      	bx	lr
 8000c1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1e:	d102      	bne.n	8000c26 <__aeabi_d2uiz+0x3a>
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c24:	4770      	bx	lr
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	4770      	bx	lr

08000c2c <getIntLen>:
int len = 0;
static const char digit[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 
                             'A', 'B', 'C', 'D', 'E', 'F'};

static int getIntLen (long int value)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  int l = 1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
  while(value > 9)
 8000c38:	e00a      	b.n	8000c50 <getIntLen+0x24>
  {
    l++;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
    value /= 10;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <getIntLen+0x38>)
 8000c44:	fb82 1203 	smull	r1, r2, r2, r3
 8000c48:	1092      	asrs	r2, r2, #2
 8000c4a:	17db      	asrs	r3, r3, #31
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	607b      	str	r3, [r7, #4]
  while(value > 9)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b09      	cmp	r3, #9
 8000c54:	dcf1      	bgt.n	8000c3a <getIntLen+0xe>
  }
  return l;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	66666667 	.word	0x66666667

08000c68 <power>:

int power(int a, int b)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  int i;
  int x = a;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60bb      	str	r3, [r7, #8]

  for (i = 1; i < b; i++)
 8000c76:	2301      	movs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	e007      	b.n	8000c8c <power+0x24>
  {
    x *= a;
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	fb02 f303 	mul.w	r3, r2, r3
 8000c84:	60bb      	str	r3, [r7, #8]
  for (i = 1; i < b; i++)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	dbf3      	blt.n	8000c7c <power+0x14>
  }

  return x;
 8000c94:	68bb      	ldr	r3, [r7, #8]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <itoa10Unsigned>:

static int itoa10Unsigned(putc_t putcf, unsigned long long int num)
{
 8000ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000ca8:	b088      	sub	sp, #32
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]

  if (num == 0)
 8000cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	d104      	bne.n	8000cc8 <itoa10Unsigned+0x24>
  {
    putcf('0');
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	2030      	movs	r0, #48	@ 0x30
 8000cc2:	4798      	blx	r3
    return 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e057      	b.n	8000d78 <itoa10Unsigned+0xd4>
  }

  unsigned long long int i = 1;
 8000cc8:	f04f 0201 	mov.w	r2, #1
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e9c7 2304 	strd	r2, r3, [r7, #16]

  while ((num / i) > 9)
 8000cd4:	e019      	b.n	8000d0a <itoa10Unsigned+0x66>
  {
    i *= 10L;
 8000cd6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000cda:	4642      	mov	r2, r8
 8000cdc:	464b      	mov	r3, r9
 8000cde:	f04f 0000 	mov.w	r0, #0
 8000ce2:	f04f 0100 	mov.w	r1, #0
 8000ce6:	0099      	lsls	r1, r3, #2
 8000ce8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000cec:	0090      	lsls	r0, r2, #2
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	eb12 0408 	adds.w	r4, r2, r8
 8000cf6:	eb43 0509 	adc.w	r5, r3, r9
 8000cfa:	eb14 0a04 	adds.w	sl, r4, r4
 8000cfe:	eb45 0b05 	adc.w	fp, r5, r5
 8000d02:	4654      	mov	r4, sl
 8000d04:	465d      	mov	r5, fp
 8000d06:	e9c7 4504 	strd	r4, r5, [r7, #16]
  while ((num / i) > 9)
 8000d0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d12:	f7ff fabb 	bl	800028c <__aeabi_uldivmod>
 8000d16:	4602      	mov	r2, r0
 8000d18:	460b      	mov	r3, r1
 8000d1a:	2a0a      	cmp	r2, #10
 8000d1c:	f173 0300 	sbcs.w	r3, r3, #0
 8000d20:	d2d9      	bcs.n	8000cd6 <itoa10Unsigned+0x32>
  }

  do
  {
    putcf(digit[(num / i) % 10L]);
 8000d22:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000d2a:	f7ff faaf 	bl	800028c <__aeabi_uldivmod>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 020a 	mov.w	r2, #10
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	f7ff faa5 	bl	800028c <__aeabi_uldivmod>
 8000d42:	4910      	ldr	r1, [pc, #64]	@ (8000d84 <itoa10Unsigned+0xe0>)
 8000d44:	188b      	adds	r3, r1, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	4798      	blx	r3
    len++;
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	3301      	adds	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
  }
  while (i /= 10L);
 8000d56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d5a:	f04f 020a 	mov.w	r2, #10
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	f7ff fa93 	bl	800028c <__aeabi_uldivmod>
 8000d66:	4602      	mov	r2, r0
 8000d68:	460b      	mov	r3, r1
 8000d6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000d6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	d1d5      	bne.n	8000d22 <itoa10Unsigned+0x7e>

  return len;
 8000d76:	69fb      	ldr	r3, [r7, #28]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3720      	adds	r7, #32
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d82:	bf00      	nop
 8000d84:	08002d68 	.word	0x08002d68

08000d88 <itoa10>:

static int itoa10(putc_t putcf, long long int num, int precision)
{
 8000d88:	b5b0      	push	{r4, r5, r7, lr}
 8000d8a:	b08a      	sub	sp, #40	@ 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (num == 0)
 8000d98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	d104      	bne.n	8000daa <itoa10+0x22>
  {
    putcf('0');
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2030      	movs	r0, #48	@ 0x30
 8000da4:	4798      	blx	r3
    return 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e037      	b.n	8000e1a <itoa10+0x92>
  }

  long long unsigned int n = num;
 8000daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dae:	e9c7 2306 	strd	r2, r3, [r7, #24]
  if (num < 0)
 8000db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da0d      	bge.n	8000dd6 <itoa10+0x4e>
  {
    n = -num;
 8000dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4254      	negs	r4, r2
 8000dc2:	eb61 0503 	sbc.w	r5, r1, r3
 8000dc6:	e9c7 4506 	strd	r4, r5, [r7, #24]
    putcf('-');
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	202d      	movs	r0, #45	@ 0x2d
 8000dce:	4798      	blx	r3
    len++;
 8000dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  int numLenght = getIntLen(num);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff27 	bl	8000c2c <getIntLen>
 8000dde:	6138      	str	r0, [r7, #16]
  if (numLenght < precision)
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000de4:	429a      	cmp	r2, r3
 8000de6:	da10      	bge.n	8000e0a <itoa10+0x82>
  {
    int fillWithZero = precision - numLenght;
 8000de8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8000df0:	e008      	b.n	8000e04 <itoa10+0x7c>
    {
      putcf('0');
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2030      	movs	r0, #48	@ 0x30
 8000df6:	4798      	blx	r3
      len++;
 8000df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24
      fillWithZero--;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	617b      	str	r3, [r7, #20]
    while (fillWithZero > 0)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	dcf3      	bgt.n	8000df2 <itoa10+0x6a>
    }
  }

  return itoa10Unsigned(putcf, n) + len;
 8000e0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ff48 	bl	8000ca4 <itoa10Unsigned>
 8000e14:	4602      	mov	r2, r0
 8000e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e18:	4413      	add	r3, r2
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e24 <itoa16>:

static int itoa16(putc_t putcf, uint64_t num, int width, char padChar)
{
 8000e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e28:	b08d      	sub	sp, #52	@ 0x34
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  bool foundFirst = false;
 8000e36:	2300      	movs	r3, #0
 8000e38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  for (int i = 15; i >= 0; i--)
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e40:	e059      	b.n	8000ef6 <itoa16+0xd2>
  {
    int shift = i * 4;
 8000e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
    uint64_t mask = (uint64_t)0x0F << shift;
 8000e48:	f04f 020f 	mov.w	r2, #15
 8000e4c:	f04f 0300 	mov.w	r3, #0
 8000e50:	6a39      	ldr	r1, [r7, #32]
 8000e52:	f1a1 0620 	sub.w	r6, r1, #32
 8000e56:	f1c1 0020 	rsb	r0, r1, #32
 8000e5a:	fa03 f501 	lsl.w	r5, r3, r1
 8000e5e:	fa02 f606 	lsl.w	r6, r2, r6
 8000e62:	4335      	orrs	r5, r6
 8000e64:	fa22 f000 	lsr.w	r0, r2, r0
 8000e68:	4305      	orrs	r5, r0
 8000e6a:	fa02 f401 	lsl.w	r4, r2, r1
 8000e6e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    uint64_t val = (num & mask) >> shift;
 8000e72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e7a:	ea00 0a02 	and.w	sl, r0, r2
 8000e7e:	ea01 0b03 	and.w	fp, r1, r3
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	f1c3 0120 	rsb	r1, r3, #32
 8000e88:	f1a3 0220 	sub.w	r2, r3, #32
 8000e8c:	fa2a f803 	lsr.w	r8, sl, r3
 8000e90:	fa0b f101 	lsl.w	r1, fp, r1
 8000e94:	ea48 0801 	orr.w	r8, r8, r1
 8000e98:	fa2b f202 	lsr.w	r2, fp, r2
 8000e9c:	ea48 0802 	orr.w	r8, r8, r2
 8000ea0:	fa2b f903 	lsr.w	r9, fp, r3
 8000ea4:	e9c7 8904 	strd	r8, r9, [r7, #16]

    if (val > 0)
 8000ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	d002      	beq.n	8000eb6 <itoa16+0x92>
    {
      foundFirst = true;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    }

    if (foundFirst || i < width)
 8000eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <itoa16+0xa2>
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	da14      	bge.n	8000ef0 <itoa16+0xcc>
    {
      if (foundFirst)
 8000ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d008      	beq.n	8000ee0 <itoa16+0xbc>
      {
        putcf(digit[val]);
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <itoa16+0xe4>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4610      	mov	r0, r2
 8000edc:	4798      	blx	r3
 8000ede:	e004      	b.n	8000eea <itoa16+0xc6>
      }
      else
      {
        putcf(padChar);
 8000ee0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4798      	blx	r3
      }

      len++;
 8000eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  for (int i = 15; i >= 0; i--)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	daa2      	bge.n	8000e42 <itoa16+0x1e>
    }
  }

  return len;
 8000efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3734      	adds	r7, #52	@ 0x34
 8000f02:	46bd      	mov	sp, r7
 8000f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f08:	08002d68 	.word	0x08002d68

08000f0c <handleLongLong>:

static int handleLongLong(putc_t putcf, const char** fmt, unsigned long long int val, int width, char padChar)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	e9c7 2300 	strd	r2, r3, [r7]
  int len = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	1c59      	adds	r1, r3, #1
 8000f24:	68ba      	ldr	r2, [r7, #8]
 8000f26:	6011      	str	r1, [r2, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3b58      	subs	r3, #88	@ 0x58
 8000f2c:	2b20      	cmp	r3, #32
 8000f2e:	d861      	bhi.n	8000ff4 <handleLongLong+0xe8>
 8000f30:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <handleLongLong+0x2c>)
 8000f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f36:	bf00      	nop
 8000f38:	08000fdd 	.word	0x08000fdd
 8000f3c:	08000ff5 	.word	0x08000ff5
 8000f40:	08000ff5 	.word	0x08000ff5
 8000f44:	08000ff5 	.word	0x08000ff5
 8000f48:	08000ff5 	.word	0x08000ff5
 8000f4c:	08000ff5 	.word	0x08000ff5
 8000f50:	08000ff5 	.word	0x08000ff5
 8000f54:	08000ff5 	.word	0x08000ff5
 8000f58:	08000ff5 	.word	0x08000ff5
 8000f5c:	08000ff5 	.word	0x08000ff5
 8000f60:	08000ff5 	.word	0x08000ff5
 8000f64:	08000ff5 	.word	0x08000ff5
 8000f68:	08000fbd 	.word	0x08000fbd
 8000f6c:	08000ff5 	.word	0x08000ff5
 8000f70:	08000ff5 	.word	0x08000ff5
 8000f74:	08000ff5 	.word	0x08000ff5
 8000f78:	08000ff5 	.word	0x08000ff5
 8000f7c:	08000fbd 	.word	0x08000fbd
 8000f80:	08000ff5 	.word	0x08000ff5
 8000f84:	08000ff5 	.word	0x08000ff5
 8000f88:	08000ff5 	.word	0x08000ff5
 8000f8c:	08000ff5 	.word	0x08000ff5
 8000f90:	08000ff5 	.word	0x08000ff5
 8000f94:	08000ff5 	.word	0x08000ff5
 8000f98:	08000ff5 	.word	0x08000ff5
 8000f9c:	08000ff5 	.word	0x08000ff5
 8000fa0:	08000ff5 	.word	0x08000ff5
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08000ff5 	.word	0x08000ff5
 8000fac:	08000fcf 	.word	0x08000fcf
 8000fb0:	08000ff5 	.word	0x08000ff5
 8000fb4:	08000ff5 	.word	0x08000ff5
 8000fb8:	08000fdd 	.word	0x08000fdd
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long long int)val, 0);
 8000fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	9100      	str	r1, [sp, #0]
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff fedf 	bl	8000d88 <itoa10>
 8000fca:	6178      	str	r0, [r7, #20]
      break;
 8000fcc:	e013      	b.n	8000ff6 <handleLongLong+0xea>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 8000fce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f7ff fe66 	bl	8000ca4 <itoa10Unsigned>
 8000fd8:	6178      	str	r0, [r7, #20]
      break;
 8000fda:	e00c      	b.n	8000ff6 <handleLongLong+0xea>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 8000fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fea:	68f8      	ldr	r0, [r7, #12]
 8000fec:	f7ff ff1a 	bl	8000e24 <itoa16>
 8000ff0:	6178      	str	r0, [r7, #20]
      break;
 8000ff2:	e000      	b.n	8000ff6 <handleLongLong+0xea>
    default:
      // Nothing here
      break;
 8000ff4:	bf00      	nop
  }

  return len;
 8000ff6:	697b      	ldr	r3, [r7, #20]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <handleLong>:

static int handleLong(putc_t putcf, const char** fmt, unsigned long int val, int width, char padChar)
{
 8001000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001004:	b088      	sub	sp, #32
 8001006:	af02      	add	r7, sp, #8
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	603b      	str	r3, [r7, #0]
  int len = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  switch(*((*fmt)++))
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1c59      	adds	r1, r3, #1
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	6011      	str	r1, [r2, #0]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3b58      	subs	r3, #88	@ 0x58
 8001022:	2b20      	cmp	r3, #32
 8001024:	d86c      	bhi.n	8001100 <handleLong+0x100>
 8001026:	a201      	add	r2, pc, #4	@ (adr r2, 800102c <handleLong+0x2c>)
 8001028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102c:	080010e1 	.word	0x080010e1
 8001030:	08001101 	.word	0x08001101
 8001034:	08001101 	.word	0x08001101
 8001038:	08001101 	.word	0x08001101
 800103c:	08001101 	.word	0x08001101
 8001040:	08001101 	.word	0x08001101
 8001044:	08001101 	.word	0x08001101
 8001048:	08001101 	.word	0x08001101
 800104c:	08001101 	.word	0x08001101
 8001050:	08001101 	.word	0x08001101
 8001054:	08001101 	.word	0x08001101
 8001058:	08001101 	.word	0x08001101
 800105c:	080010b1 	.word	0x080010b1
 8001060:	08001101 	.word	0x08001101
 8001064:	08001101 	.word	0x08001101
 8001068:	08001101 	.word	0x08001101
 800106c:	08001101 	.word	0x08001101
 8001070:	080010b1 	.word	0x080010b1
 8001074:	08001101 	.word	0x08001101
 8001078:	08001101 	.word	0x08001101
 800107c:	08001101 	.word	0x08001101
 8001080:	08001101 	.word	0x08001101
 8001084:	08001101 	.word	0x08001101
 8001088:	08001101 	.word	0x08001101
 800108c:	08001101 	.word	0x08001101
 8001090:	08001101 	.word	0x08001101
 8001094:	08001101 	.word	0x08001101
 8001098:	08001101 	.word	0x08001101
 800109c:	08001101 	.word	0x08001101
 80010a0:	080010cb 	.word	0x080010cb
 80010a4:	08001101 	.word	0x08001101
 80010a8:	08001101 	.word	0x08001101
 80010ac:	080010e1 	.word	0x080010e1
  {
    case 'i':
    case 'd':
      len = itoa10(putcf, (long int)val, 0);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	17da      	asrs	r2, r3, #31
 80010b4:	469a      	mov	sl, r3
 80010b6:	4693      	mov	fp, r2
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4652      	mov	r2, sl
 80010be:	465b      	mov	r3, fp
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff fe61 	bl	8000d88 <itoa10>
 80010c6:	6178      	str	r0, [r7, #20]
      break;
 80010c8:	e01b      	b.n	8001102 <handleLong+0x102>
    case 'u':
      len = itoa10Unsigned(putcf, val);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	4698      	mov	r8, r3
 80010d0:	4691      	mov	r9, r2
 80010d2:	4642      	mov	r2, r8
 80010d4:	464b      	mov	r3, r9
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff fde4 	bl	8000ca4 <itoa10Unsigned>
 80010dc:	6178      	str	r0, [r7, #20]
      break;
 80010de:	e010      	b.n	8001102 <handleLong+0x102>
    case 'x':
    case 'X':
      len = itoa16(putcf, val, width, padChar);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	461c      	mov	r4, r3
 80010e6:	4615      	mov	r5, r2
 80010e8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	4622      	mov	r2, r4
 80010f4:	462b      	mov	r3, r5
 80010f6:	68f8      	ldr	r0, [r7, #12]
 80010f8:	f7ff fe94 	bl	8000e24 <itoa16>
 80010fc:	6178      	str	r0, [r7, #20]
      break;
 80010fe:	e000      	b.n	8001102 <handleLong+0x102>
    default:
      // Nothing here
      break;
 8001100:	bf00      	nop
  }

  return len;
 8001102:	697b      	ldr	r3, [r7, #20]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800110e:	bf00      	nop

08001110 <evprintf>:

int evprintf(putc_t putcf, const char * fmt, va_list ap)
{
 8001110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001114:	ed2d 8b02 	vpush	{d8}
 8001118:	b08e      	sub	sp, #56	@ 0x38
 800111a:	af02      	add	r7, sp, #8
 800111c:	6178      	str	r0, [r7, #20]
 800111e:	6139      	str	r1, [r7, #16]
 8001120:	60fa      	str	r2, [r7, #12]
  int len=0;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
  char* str;
  int precision;
  int width;
  char padChar;

  while (*fmt)
 8001126:	e19e      	b.n	8001466 <evprintf+0x356>
  {
    if (*fmt == '%')
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b25      	cmp	r3, #37	@ 0x25
 800112e:	f040 818d 	bne.w	800144c <evprintf+0x33c>
    {
      precision = 6;
 8001132:	2306      	movs	r3, #6
 8001134:	623b      	str	r3, [r7, #32]
      padChar = ' ';
 8001136:	2320      	movs	r3, #32
 8001138:	76fb      	strb	r3, [r7, #27]
      width = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]

      fmt++;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	3301      	adds	r3, #1
 8001142:	613b      	str	r3, [r7, #16]
      if (*fmt == '%') {
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b25      	cmp	r3, #37	@ 0x25
 800114a:	d110      	bne.n	800116e <evprintf+0x5e>
        putcf(*fmt++);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	613a      	str	r2, [r7, #16]
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	461a      	mov	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4610      	mov	r0, r2
 800115a:	4798      	blx	r3
        len++;
 800115c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800115e:	3301      	adds	r3, #1
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
        continue;
 8001162:	e180      	b.n	8001466 <evprintf+0x356>
      }

      while ('0' == *fmt)
      {
        padChar = '0';
 8001164:	2330      	movs	r3, #48	@ 0x30
 8001166:	76fb      	strb	r3, [r7, #27]
        fmt++;
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	613b      	str	r3, [r7, #16]
      while ('0' == *fmt)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b30      	cmp	r3, #48	@ 0x30
 8001174:	d0f6      	beq.n	8001164 <evprintf+0x54>
      }

			while(isdigit((unsigned)*fmt))
 8001176:	e00e      	b.n	8001196 <evprintf+0x86>
			{
				width *= 10;
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
				width += *fmt - '0';
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	3b30      	subs	r3, #48	@ 0x30
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	4413      	add	r3, r2
 800118e:	61fb      	str	r3, [r7, #28]
				fmt++;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	3301      	adds	r3, #1
 8001194:	613b      	str	r3, [r7, #16]
			while(isdigit((unsigned)*fmt))
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3b30      	subs	r3, #48	@ 0x30
 800119c:	2b09      	cmp	r3, #9
 800119e:	d9eb      	bls.n	8001178 <evprintf+0x68>
			}

      while (!isalpha((unsigned) *fmt))
 80011a0:	e012      	b.n	80011c8 <evprintf+0xb8>
      {
        if (*fmt == '.')
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80011a8:	d10e      	bne.n	80011c8 <evprintf+0xb8>
        {
          fmt++;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	3301      	adds	r3, #1
 80011ae:	613b      	str	r3, [r7, #16]
          if (isdigit((unsigned)*fmt))
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	3b30      	subs	r3, #48	@ 0x30
 80011b6:	2b09      	cmp	r3, #9
 80011b8:	d806      	bhi.n	80011c8 <evprintf+0xb8>
          {
            precision = *fmt - '0';
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3b30      	subs	r3, #48	@ 0x30
 80011c0:	623b      	str	r3, [r7, #32]
            fmt++;
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	3301      	adds	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
      while (!isalpha((unsigned) *fmt))
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fd75 	bl	8002cbc <isalpha>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0e4      	beq.n	80011a2 <evprintf+0x92>
          }
        }
      }
      switch (*fmt++)
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	613a      	str	r2, [r7, #16]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b58      	subs	r3, #88	@ 0x58
 80011e2:	2b20      	cmp	r3, #32
 80011e4:	f200 813e 	bhi.w	8001464 <evprintf+0x354>
 80011e8:	a201      	add	r2, pc, #4	@ (adr r2, 80011f0 <evprintf+0xe0>)
 80011ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ee:	bf00      	nop
 80011f0:	080012bd 	.word	0x080012bd
 80011f4:	08001465 	.word	0x08001465
 80011f8:	08001465 	.word	0x08001465
 80011fc:	08001465 	.word	0x08001465
 8001200:	08001465 	.word	0x08001465
 8001204:	08001465 	.word	0x08001465
 8001208:	08001465 	.word	0x08001465
 800120c:	08001465 	.word	0x08001465
 8001210:	08001465 	.word	0x08001465
 8001214:	08001465 	.word	0x08001465
 8001218:	08001465 	.word	0x08001465
 800121c:	08001433 	.word	0x08001433
 8001220:	08001275 	.word	0x08001275
 8001224:	08001465 	.word	0x08001465
 8001228:	08001347 	.word	0x08001347
 800122c:	08001465 	.word	0x08001465
 8001230:	08001465 	.word	0x08001465
 8001234:	08001275 	.word	0x08001275
 8001238:	08001465 	.word	0x08001465
 800123c:	08001465 	.word	0x08001465
 8001240:	080012e7 	.word	0x080012e7
 8001244:	08001465 	.word	0x08001465
 8001248:	08001465 	.word	0x08001465
 800124c:	08001465 	.word	0x08001465
 8001250:	08001465 	.word	0x08001465
 8001254:	08001465 	.word	0x08001465
 8001258:	08001465 	.word	0x08001465
 800125c:	08001407 	.word	0x08001407
 8001260:	08001465 	.word	0x08001465
 8001264:	0800129b 	.word	0x0800129b
 8001268:	08001465 	.word	0x08001465
 800126c:	08001465 	.word	0x08001465
 8001270:	080012bd 	.word	0x080012bd
      {
        case 'i':
        case 'd':
          len += itoa10(putcf, va_arg(ap, int), 0);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	1d1a      	adds	r2, r3, #4
 8001278:	60fa      	str	r2, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	17da      	asrs	r2, r3, #31
 800127e:	461c      	mov	r4, r3
 8001280:	4615      	mov	r5, r2
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4622      	mov	r2, r4
 8001288:	462b      	mov	r3, r5
 800128a:	6978      	ldr	r0, [r7, #20]
 800128c:	f7ff fd7c 	bl	8000d88 <itoa10>
 8001290:	4602      	mov	r2, r0
 8001292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001294:	4413      	add	r3, r2
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8001298:	e0e5      	b.n	8001466 <evprintf+0x356>
        case 'u':
          len += itoa10Unsigned(putcf, va_arg(ap, unsigned int));
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1d1a      	adds	r2, r3, #4
 800129e:	60fa      	str	r2, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2200      	movs	r2, #0
 80012a4:	4698      	mov	r8, r3
 80012a6:	4691      	mov	r9, r2
 80012a8:	4642      	mov	r2, r8
 80012aa:	464b      	mov	r3, r9
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff fcf9 	bl	8000ca4 <itoa10Unsigned>
 80012b2:	4602      	mov	r2, r0
 80012b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b6:	4413      	add	r3, r2
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80012ba:	e0d4      	b.n	8001466 <evprintf+0x356>
        case 'x':
        case 'X':
          len += itoa16(putcf, va_arg(ap, unsigned int), width, padChar);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1d1a      	adds	r2, r3, #4
 80012c0:	60fa      	str	r2, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	469a      	mov	sl, r3
 80012c8:	4693      	mov	fp, r2
 80012ca:	7efb      	ldrb	r3, [r7, #27]
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4652      	mov	r2, sl
 80012d4:	465b      	mov	r3, fp
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff fda4 	bl	8000e24 <itoa16>
 80012dc:	4602      	mov	r2, r0
 80012de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e0:	4413      	add	r3, r2
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80012e4:	e0bf      	b.n	8001466 <evprintf+0x356>
        case 'l':
          // Look ahead for ll
          if (*fmt == 'l') {
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b6c      	cmp	r3, #108	@ 0x6c
 80012ec:	d11a      	bne.n	8001324 <evprintf+0x214>
            fmt++;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	3301      	adds	r3, #1
 80012f2:	613b      	str	r3, [r7, #16]
            len += handleLongLong(putcf, &fmt, va_arg(ap, unsigned long long int), width, padChar);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3307      	adds	r3, #7
 80012f8:	f023 0307 	bic.w	r3, r3, #7
 80012fc:	f103 0208 	add.w	r2, r3, #8
 8001300:	60fa      	str	r2, [r7, #12]
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f107 0010 	add.w	r0, r7, #16
 800130a:	7ef9      	ldrb	r1, [r7, #27]
 800130c:	9101      	str	r1, [sp, #4]
 800130e:	69f9      	ldr	r1, [r7, #28]
 8001310:	9100      	str	r1, [sp, #0]
 8001312:	4601      	mov	r1, r0
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff fdf9 	bl	8000f0c <handleLongLong>
 800131a:	4602      	mov	r2, r0
 800131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131e:	4413      	add	r3, r2
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
          } else {
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
          }

          break;
 8001322:	e0a0      	b.n	8001466 <evprintf+0x356>
            len += handleLong(putcf, &fmt, va_arg(ap, unsigned long int), width, padChar);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1d1a      	adds	r2, r3, #4
 8001328:	60fa      	str	r2, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f107 0110 	add.w	r1, r7, #16
 8001330:	7efb      	ldrb	r3, [r7, #27]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff fe62 	bl	8001000 <handleLong>
 800133c:	4602      	mov	r2, r0
 800133e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001340:	4413      	add	r3, r2
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8001344:	e08f      	b.n	8001466 <evprintf+0x356>
        case 'f':
          num = va_arg(ap, double);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3307      	adds	r3, #7
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	f103 0208 	add.w	r2, r3, #8
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7fe ff46 	bl	80001ec <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
          if(num<0)
 8001364:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001370:	d50b      	bpl.n	800138a <evprintf+0x27a>
          {
            putcf('-');
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	202d      	movs	r0, #45	@ 0x2d
 8001376:	4798      	blx	r3
            num = -num;
 8001378:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800137c:	eef1 7a67 	vneg.f32	s15, s15
 8001380:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            len++;
 8001384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001386:	3301      	adds	r3, #1
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
          }
          len += itoa10(putcf, (int)num, 0);
 800138a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	17d3      	asrs	r3, r2, #31
 8001398:	603a      	str	r2, [r7, #0]
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013a4:	6978      	ldr	r0, [r7, #20]
 80013a6:	f7ff fcef 	bl	8000d88 <itoa10>
 80013aa:	4602      	mov	r2, r0
 80013ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ae:	4413      	add	r3, r2
 80013b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
          putcf('.'); len++;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	202e      	movs	r0, #46	@ 0x2e
 80013b6:	4798      	blx	r3
 80013b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ba:	3301      	adds	r3, #1
 80013bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          len += itoa10(putcf, (num - (int)num) * power(10,precision), precision);
 80013be:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013ce:	ee37 8a67 	vsub.f32	s16, s14, s15
 80013d2:	6a39      	ldr	r1, [r7, #32]
 80013d4:	200a      	movs	r0, #10
 80013d6:	f7ff fc47 	bl	8000c68 <power>
 80013da:	ee07 0a90 	vmov	s15, r0
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80013e6:	ee17 0a90 	vmov	r0, s15
 80013ea:	f7fe ff67 	bl	80002bc <__aeabi_f2lz>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	6a39      	ldr	r1, [r7, #32]
 80013f4:	9100      	str	r1, [sp, #0]
 80013f6:	6978      	ldr	r0, [r7, #20]
 80013f8:	f7ff fcc6 	bl	8000d88 <itoa10>
 80013fc:	4602      	mov	r2, r0
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	4413      	add	r3, r2
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8001404:	e02f      	b.n	8001466 <evprintf+0x356>

        case 's':
          str = va_arg(ap, char* );
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	1d1a      	adds	r2, r3, #4
 800140a:	60fa      	str	r2, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
          while(*str)
 8001410:	e00a      	b.n	8001428 <evprintf+0x318>
          {
            putcf(*str++);
 8001412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001414:	1c5a      	adds	r2, r3, #1
 8001416:	627a      	str	r2, [r7, #36]	@ 0x24
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	4610      	mov	r0, r2
 8001420:	4798      	blx	r3
            len++;
 8001422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001424:	3301      	adds	r3, #1
 8001426:	62fb      	str	r3, [r7, #44]	@ 0x2c
          while(*str)
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <evprintf+0x302>
          }
          break;
 8001430:	e019      	b.n	8001466 <evprintf+0x356>
        case 'c':
          putcf((char)va_arg(ap, int));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1d1a      	adds	r2, r3, #4
 8001436:	60fa      	str	r2, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4610      	mov	r0, r2
 8001442:	4798      	blx	r3
          len++;
 8001444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001446:	3301      	adds	r3, #1
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 800144a:	e00c      	b.n	8001466 <evprintf+0x356>
          break;
      }
    }
    else
    {
      putcf(*fmt++);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	613a      	str	r2, [r7, #16]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	4610      	mov	r0, r2
 800145a:	4798      	blx	r3
      len++;
 800145c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800145e:	3301      	adds	r3, #1
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001462:	e000      	b.n	8001466 <evprintf+0x356>
          break;
 8001464:	bf00      	nop
  while (*fmt)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	f47f ae5c 	bne.w	8001128 <evprintf+0x18>
    }
  }
  
  return len;
 8001470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001472:	4618      	mov	r0, r3
 8001474:	3730      	adds	r7, #48	@ 0x30
 8001476:	46bd      	mov	sp, r7
 8001478:	ecbd 8b02 	vpop	{d8}
 800147c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001480 <eprintf>:

int eprintf(putc_t putcf, const char * fmt, ...)
{
 8001480:	b40e      	push	{r1, r2, r3}
 8001482:	b580      	push	{r7, lr}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
  va_list ap;
  int len;

  va_start(ap, fmt);
 800148a:	f107 0320 	add.w	r3, r7, #32
 800148e:	60bb      	str	r3, [r7, #8]
  len = evprintf(putcf, fmt, ap);
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	69f9      	ldr	r1, [r7, #28]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe3b 	bl	8001110 <evprintf>
 800149a:	60f8      	str	r0, [r7, #12]
  va_end(ap);

  return len;
 800149c:	68fb      	ldr	r3, [r7, #12]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014a8:	b003      	add	sp, #12
 80014aa:	4770      	bx	lr

080014ac <uartPutchar>:

int uartPutchar(int ch)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(!SendingisPending)
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <uartPutchar+0x6c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d024      	beq.n	800150c <uartPutchar+0x60>
  {
    if(len < Buffer)
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <uartPutchar+0x70>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80014c8:	dc0a      	bgt.n	80014e0 <uartPutchar+0x34>
    {
      data[len] = (uint8_t)ch;
 80014ca:	4b14      	ldr	r3, [pc, #80]	@ (800151c <uartPutchar+0x70>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	b2d1      	uxtb	r1, r2
 80014d2:	4a13      	ldr	r2, [pc, #76]	@ (8001520 <uartPutchar+0x74>)
 80014d4:	54d1      	strb	r1, [r2, r3]
      len++;
 80014d6:	4b11      	ldr	r3, [pc, #68]	@ (800151c <uartPutchar+0x70>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <uartPutchar+0x70>)
 80014de:	6013      	str	r3, [r2, #0]
    }

    if(ch == '\n' || len >= Buffer)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0a      	cmp	r3, #10
 80014e4:	d003      	beq.n	80014ee <uartPutchar+0x42>
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <uartPutchar+0x70>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ec:	dd0e      	ble.n	800150c <uartPutchar+0x60>
    {
      SendingisPending = 1;
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <uartPutchar+0x6c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	701a      	strb	r2, [r3, #0]
      UART1_Transmit(data, len);
 80014f4:	4b09      	ldr	r3, [pc, #36]	@ (800151c <uartPutchar+0x70>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4809      	ldr	r0, [pc, #36]	@ (8001520 <uartPutchar+0x74>)
 80014fc:	f000 fcbc 	bl	8001e78 <UART1_Transmit>
      SendingisPending = 0;
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <uartPutchar+0x6c>)
 8001502:	2200      	movs	r2, #0
 8001504:	701a      	strb	r2, [r3, #0]
      len = 0;
 8001506:	4b05      	ldr	r3, [pc, #20]	@ (800151c <uartPutchar+0x70>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
    }
  }
  return ch;
 800150c:	687b      	ldr	r3, [r7, #4]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000020 	.word	0x20000020
 800151c:	200000a4 	.word	0x200000a4
 8001520:	20000024 	.word	0x20000024

08001524 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800152e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001530:	4907      	ldr	r1, [pc, #28]	@ (8001550 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4313      	orrs	r3, r2
 8001536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800153a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40021000 	.word	0x40021000

08001554 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	619a      	str	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	463b      	mov	r3, r7
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff ffcc 	bl	8001524 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800158c:	2002      	movs	r0, #2
 800158e:	f7ff ffc9 	bl	8001524 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_9);
 8001592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001596:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <MX_GPIO_Init+0x54>)
 8001598:	f7ff ffdc 	bl	8001554 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800159c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015a2:	2301      	movs	r3, #1
 80015a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	463b      	mov	r3, r7
 80015b4:	4619      	mov	r1, r3
 80015b6:	4803      	ldr	r0, [pc, #12]	@ (80015c4 <MX_GPIO_Init+0x54>)
 80015b8:	f000 fe08 	bl	80021cc <LL_GPIO_Init>

}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	48000400 	.word	0x48000400

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	@ (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	@ (800167c <__NVIC_SetPriority+0x50>)
 800165c:	79fb      	ldrb	r3, [r7, #7]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	@ 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <LL_RCC_MSI_Enable+0x1c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <LL_RCC_MSI_Enable+0x1c>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <LL_RCC_MSI_IsReady+0x20>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b02      	cmp	r3, #2
 8001716:	d101      	bne.n	800171c <LL_RCC_MSI_IsReady+0x14>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <LL_RCC_MSI_IsReady+0x16>
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8001736:	f043 0308 	orr.w	r3, r3, #8
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <LL_RCC_MSI_SetRange+0x24>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800175c:	4904      	ldr	r1, [pc, #16]	@ (8001770 <LL_RCC_MSI_SetRange+0x24>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4313      	orrs	r3, r2
 8001762:	600b      	str	r3, [r1, #0]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	4904      	ldr	r1, [pc, #16]	@ (800179c <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <LL_RCC_SetSysClkSource+0x24>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 0203 	bic.w	r2, r3, #3
 80017b0:	4904      	ldr	r1, [pc, #16]	@ (80017c4 <LL_RCC_SetSysClkSource+0x24>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <LL_RCC_GetSysClkSource+0x18>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <LL_RCC_SetAHBPrescaler+0x24>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f4:	4904      	ldr	r1, [pc, #16]	@ (8001808 <LL_RCC_SetAHBPrescaler+0x24>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800181c:	4904      	ldr	r1, [pc, #16]	@ (8001830 <LL_RCC_SetAPB1Prescaler+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40021000 	.word	0x40021000

08001834 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <LL_RCC_SetAPB2Prescaler+0x24>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001844:	4904      	ldr	r1, [pc, #16]	@ (8001858 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001864:	4b08      	ldr	r3, [pc, #32]	@ (8001888 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001866:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001868:	4907      	ldr	r1, [pc, #28]	@ (8001888 <LL_APB1_GRP1_EnableClock+0x2c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4313      	orrs	r3, r2
 800186e:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001872:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	40021000 	.word	0x40021000

0800188c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001896:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001898:	4907      	ldr	r1, [pc, #28]	@ (80018b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018a0:	4b05      	ldr	r3, [pc, #20]	@ (80018b8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80018a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <LL_FLASH_SetLatency+0x24>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	4904      	ldr	r1, [pc, #16]	@ (80018e0 <LL_FLASH_SetLatency+0x24>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40022000 	.word	0x40022000

080018e4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <LL_FLASH_GetLatency+0x18>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0307 	and.w	r3, r3, #7
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8001910:	4904      	ldr	r1, [pc, #16]	@ (8001924 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	600b      	str	r3, [r1, #0]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40007000 	.word	0x40007000

08001928 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <LL_PWR_IsActiveFlag_VOS+0x24>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001938:	d101      	bne.n	800193e <LL_PWR_IsActiveFlag_VOS+0x16>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_PWR_IsActiveFlag_VOS+0x18>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000

08001950 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	4013      	ands	r3, r2
 8001966:	041a      	lsls	r2, r3, #16
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43d9      	mvns	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	400b      	ands	r3, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff ff7e 	bl	800188c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001990:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001994:	f7ff ff62 	bl	800185c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001998:	2003      	movs	r0, #3
 800199a:	f7ff fe15 	bl	80015c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800199e:	f7ff fe37 	bl	8001610 <__NVIC_GetPriorityGrouping>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2200      	movs	r2, #0
 80019a6:	210f      	movs	r1, #15
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe69 	bl	8001680 <NVIC_EncodePriority>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4619      	mov	r1, r3
 80019b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019b6:	f7ff fe39 	bl	800162c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ba:	f000 f82f 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019be:	f7ff fdd7 	bl	8001570 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019c2:	f000 f9f5 	bl	8001db0 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DEBUG_PRINTF("this is a test: %u \n", 85);
 80019c6:	2255      	movs	r2, #85	@ 0x55
 80019c8:	490f      	ldr	r1, [pc, #60]	@ (8001a08 <main+0x84>)
 80019ca:	4810      	ldr	r0, [pc, #64]	@ (8001a0c <main+0x88>)
 80019cc:	f7ff fd58 	bl	8001480 <eprintf>
	  DEBUG_PRINTF("this is a test: %s \n","hello world");
 80019d0:	4a0f      	ldr	r2, [pc, #60]	@ (8001a10 <main+0x8c>)
 80019d2:	4910      	ldr	r1, [pc, #64]	@ (8001a14 <main+0x90>)
 80019d4:	480d      	ldr	r0, [pc, #52]	@ (8001a0c <main+0x88>)
 80019d6:	f7ff fd53 	bl	8001480 <eprintf>
//	  uint8_t str[3];
//	  for(int i=0;i<3;i++)str[i] = i+1;
//	  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
	    uint8_t data;
	    data = UART1_Receive();
 80019da:	f000 fa71 	bl	8001ec0 <UART1_Receive>
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
	    while(data--)
 80019e2:	e007      	b.n	80019f4 <main+0x70>
	    {
	    	LL_GPIO_TogglePin(GPIOB, LL_GPIO_PIN_9);
 80019e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019e8:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <main+0x94>)
 80019ea:	f7ff ffb1 	bl	8001950 <LL_GPIO_TogglePin>

	        LL_mDelay(100);
 80019ee:	2064      	movs	r0, #100	@ 0x64
 80019f0:	f001 f92c 	bl	8002c4c <LL_mDelay>
	    while(data--)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	1e5a      	subs	r2, r3, #1
 80019f8:	71fa      	strb	r2, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f2      	bne.n	80019e4 <main+0x60>
	    }

	    LL_mDelay(2000);
 80019fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001a02:	f001 f923 	bl	8002c4c <LL_mDelay>
  {
 8001a06:	e7de      	b.n	80019c6 <main+0x42>
 8001a08:	08002d2c 	.word	0x08002d2c
 8001a0c:	080014ad 	.word	0x080014ad
 8001a10:	08002d44 	.word	0x08002d44
 8001a14:	08002d50 	.word	0x08002d50
 8001a18:	48000400 	.word	0x48000400

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff ff4b 	bl	80018bc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001a26:	bf00      	nop
 8001a28:	f7ff ff5c 	bl	80018e4 <LL_FLASH_GetLatency>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1fa      	bne.n	8001a28 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a32:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a36:	f7ff ff63 	bl	8001900 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8001a3a:	bf00      	nop
 8001a3c:	f7ff ff74 	bl	8001928 <LL_PWR_IsActiveFlag_VOS>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1fa      	bne.n	8001a3c <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8001a46:	f7ff fe4f 	bl	80016e8 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff fe5c 	bl	8001708 <LL_RCC_MSI_IsReady>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d1fa      	bne.n	8001a4c <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8001a56:	f7ff fe69 	bl	800172c <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8001a5a:	2060      	movs	r0, #96	@ 0x60
 8001a5c:	f7ff fe76 	bl	800174c <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fe87 	bl	8001774 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fe9a 	bl	80017a0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8001a6c:	bf00      	nop
 8001a6e:	f7ff feab 	bl	80017c8 <LL_RCC_GetSysClkSource>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1fa      	bne.n	8001a6e <SystemClock_Config+0x52>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a78:	2000      	movs	r0, #0
 8001a7a:	f7ff feb3 	bl	80017e4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fec4 	bl	800180c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fed5 	bl	8001834 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(4000000);
 8001a8a:	4804      	ldr	r0, [pc, #16]	@ (8001a9c <SystemClock_Config+0x80>)
 8001a8c:	f001 f8d0 	bl	8002c30 <LL_Init1msTick>

  LL_SetSystemCoreClock(4000000);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <SystemClock_Config+0x80>)
 8001a92:	f001 f903 	bl	8002c9c <LL_SetSystemCoreClock>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	003d0900 	.word	0x003d0900

08001aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001aa4:	bf00      	nop
 8001aa6:	e7fd      	b.n	8001aa4 <NMI_Handler+0x4>

08001aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aac:	bf00      	nop
 8001aae:	e7fd      	b.n	8001aac <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <BusFault_Handler+0x4>

08001ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac4:	bf00      	nop
 8001ac6:	e7fd      	b.n	8001ac4 <UsageFault_Handler+0x4>

08001ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <SystemInit+0x20>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1a:	4a05      	ldr	r2, [pc, #20]	@ (8001b30 <SystemInit+0x20>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	@ (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	@ (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0112      	lsls	r2, r2, #4
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0112      	lsls	r2, r2, #4
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	bf28      	it	cs
 8001bfe:	2304      	movcs	r3, #4
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b03      	subs	r3, #3
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	@ 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001c50:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <LL_RCC_SetUSARTClockSource+0x30>)
 8001c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	0c1b      	lsrs	r3, r3, #16
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	401a      	ands	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	4905      	ldr	r1, [pc, #20]	@ (8001c78 <LL_RCC_SetUSARTClockSource+0x30>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40021000 	.word	0x40021000

08001c7c <LL_AHB2_GRP1_EnableClock>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c88:	4907      	ldr	r1, [pc, #28]	@ (8001ca8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40021000 	.word	0x40021000

08001cac <LL_APB2_GRP1_EnableClock>:
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cb4:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cb8:	4907      	ldr	r1, [pc, #28]	@ (8001cd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	bf00      	nop
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40021000 	.word	0x40021000

08001cdc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d101      	bne.n	8001d40 <LL_USART_IsActiveFlag_RXNE+0x18>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5e:	2b40      	cmp	r3, #64	@ 0x40
 8001d60:	d101      	bne.n	8001d66 <LL_USART_IsActiveFlag_TC+0x18>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_USART_IsActiveFlag_TC+0x1a>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08e      	sub	sp, #56	@ 0x38
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]
 8001dc6:	615a      	str	r2, [r3, #20]
 8001dc8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
 8001dd8:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8001dda:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001dde:	f7ff ff33 	bl	8001c48 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001de2:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001de6:	f7ff ff61 	bl	8001cac <LL_APB2_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff ff46 	bl	8001c7c <LL_AHB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001df0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001df4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001df6:	2302      	movs	r3, #2
 8001df8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001e06:	2307      	movs	r3, #7
 8001e08:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e12:	f000 f9db 	bl	80021cc <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e16:	f7ff fe8d 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fedd 	bl	8001be0 <NVIC_EncodePriority>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	2025      	movs	r0, #37	@ 0x25
 8001e2c:	f7ff feae 	bl	8001b8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8001e30:	2025      	movs	r0, #37	@ 0x25
 8001e32:	f7ff fe8d 	bl	8001b50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001e36:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001e3a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001e50:	2300      	movs	r3, #0
 8001e52:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	@ (8001e74 <MX_USART1_UART_Init+0xc4>)
 8001e5c:	f000 fe52 	bl	8002b04 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001e60:	4804      	ldr	r0, [pc, #16]	@ (8001e74 <MX_USART1_UART_Init+0xc4>)
 8001e62:	f7ff ff4b 	bl	8001cfc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001e66:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_USART1_UART_Init+0xc4>)
 8001e68:	f7ff ff38 	bl	8001cdc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	3738      	adds	r7, #56	@ 0x38
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013800 	.word	0x40013800

08001e78 <UART1_Transmit>:

/* USER CODE BEGIN 1 */
void UART1_Transmit(uint8_t *data, uint32_t length){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
    while (length > 0) {
 8001e82:	e012      	b.n	8001eaa <UART1_Transmit+0x32>
        while (!LL_USART_IsActiveFlag_TC(USART1));
 8001e84:	bf00      	nop
 8001e86:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <UART1_Transmit+0x44>)
 8001e88:	f7ff ff61 	bl	8001d4e <LL_USART_IsActiveFlag_TC>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f9      	beq.n	8001e86 <UART1_Transmit+0xe>
        LL_USART_TransmitData8(USART1,(*data & (uint8_t)0xff));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4808      	ldr	r0, [pc, #32]	@ (8001ebc <UART1_Transmit+0x44>)
 8001e9a:	f7ff ff79 	bl	8001d90 <LL_USART_TransmitData8>
        data++;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
        length--;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	603b      	str	r3, [r7, #0]
    while (length > 0) {
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1e9      	bne.n	8001e84 <UART1_Transmit+0xc>
    }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40013800 	.word	0x40013800

08001ec0 <UART1_Receive>:

uint8_t UART1_Receive(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
    while (!LL_USART_IsActiveFlag_RXNE(USART1));
 8001ec4:	bf00      	nop
 8001ec6:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <UART1_Receive+0x20>)
 8001ec8:	f7ff ff2e 	bl	8001d28 <LL_USART_IsActiveFlag_RXNE>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f9      	beq.n	8001ec6 <UART1_Receive+0x6>
    return LL_USART_ReceiveData8(USART1);
 8001ed2:	4803      	ldr	r0, [pc, #12]	@ (8001ee0 <UART1_Receive+0x20>)
 8001ed4:	f7ff ff4e 	bl	8001d74 <LL_USART_ReceiveData8>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40013800 	.word	0x40013800

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee8:	f7ff fe12 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopForever+0xe>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopForever+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f000 fedb 	bl	8002ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7ff fd35 	bl	8001984 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001f28:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 8001f2c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001f30:	200000a8 	.word	0x200000a8

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>

08001f36 <LL_GPIO_SetPinMode>:
{
 8001f36:	b480      	push	{r7}
 8001f38:	b08b      	sub	sp, #44	@ 0x2c
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	401a      	ands	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	61fb      	str	r3, [r7, #28]
  return result;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	e003      	b.n	8001f96 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	601a      	str	r2, [r3, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	372c      	adds	r7, #44	@ 0x2c
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_GPIO_SetPinOutputType>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	401a      	ands	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	fb01 f303 	mul.w	r3, r1, r3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <LL_GPIO_SetPinSpeed>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b08b      	sub	sp, #44	@ 0x2c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	613b      	str	r3, [r7, #16]
  return result;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e003      	b.n	8002012 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	2103      	movs	r1, #3
 8002016:	fa01 f303 	lsl.w	r3, r1, r3
 800201a:	43db      	mvns	r3, r3
 800201c:	401a      	ands	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	61fb      	str	r3, [r7, #28]
  return result;
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e003      	b.n	8002040 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	b2db      	uxtb	r3, r3
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	609a      	str	r2, [r3, #8]
}
 800204e:	bf00      	nop
 8002050:	372c      	adds	r7, #44	@ 0x2c
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_GPIO_SetPinPull>:
{
 800205a:	b480      	push	{r7}
 800205c:	b08b      	sub	sp, #44	@ 0x2c
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	613b      	str	r3, [r7, #16]
  return result;
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e003      	b.n	800208c <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2103      	movs	r1, #3
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	401a      	ands	r2, r3
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	fa93 f3a3 	rbit	r3, r3
 80020a2:	61fb      	str	r3, [r7, #28]
  return result;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80020ae:	2320      	movs	r3, #32
 80020b0:	e003      	b.n	80020ba <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	fab3 f383 	clz	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	60da      	str	r2, [r3, #12]
}
 80020c8:	bf00      	nop
 80020ca:	372c      	adds	r7, #44	@ 0x2c
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_GPIO_SetAFPin_0_7>:
{
 80020d4:	b480      	push	{r7}
 80020d6:	b08b      	sub	sp, #44	@ 0x2c
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a1a      	ldr	r2, [r3, #32]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	613b      	str	r3, [r7, #16]
  return result;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e003      	b.n	8002106 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	210f      	movs	r1, #15
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	61fb      	str	r3, [r7, #28]
  return result;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	431a      	orrs	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	621a      	str	r2, [r3, #32]
}
 8002142:	bf00      	nop
 8002144:	372c      	adds	r7, #44	@ 0x2c
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_GPIO_SetAFPin_8_15>:
{
 800214e:	b480      	push	{r7}
 8002150:	b08b      	sub	sp, #44	@ 0x2c
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	613b      	str	r3, [r7, #16]
  return result;
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002176:	2320      	movs	r3, #32
 8002178:	e003      	b.n	8002182 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	fab3 f383 	clz	r3, r3
 8002180:	b2db      	uxtb	r3, r3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	210f      	movs	r1, #15
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	401a      	ands	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	61fb      	str	r3, [r7, #28]
  return result;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80021a6:	2320      	movs	r3, #32
 80021a8:	e003      	b.n	80021b2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	fab3 f383 	clz	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ba:	431a      	orrs	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80021c0:	bf00      	nop
 80021c2:	372c      	adds	r7, #44	@ 0x2c
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	fa93 f3a3 	rbit	r3, r3
 80021e2:	60fb      	str	r3, [r7, #12]
  return result;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <LL_GPIO_Init+0x26>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e003      	b.n	80021fa <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	fab3 f383 	clz	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80021fc:	e048      	b.n	8002290 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	2101      	movs	r1, #1
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d03a      	beq.n	800228a <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d003      	beq.n	8002224 <LL_GPIO_Init+0x58>
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d10e      	bne.n	8002242 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	461a      	mov	r2, r3
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fed7 	bl	8001fe0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	461a      	mov	r2, r3
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff feb7 	bl	8001fb0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	461a      	mov	r2, r3
 8002248:	69b9      	ldr	r1, [r7, #24]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff ff05 	bl	800205a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d111      	bne.n	800227c <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	@ 0xff
 800225c:	d807      	bhi.n	800226e <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	461a      	mov	r2, r3
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ff34 	bl	80020d4 <LL_GPIO_SetAFPin_0_7>
 800226c:	e006      	b.n	800227c <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	461a      	mov	r2, r3
 8002274:	69b9      	ldr	r1, [r7, #24]
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ff69 	bl	800214e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	461a      	mov	r2, r3
 8002282:	69b9      	ldr	r1, [r7, #24]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fe56 	bl	8001f36 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	fa22 f303 	lsr.w	r3, r2, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1af      	bne.n	80021fe <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <LL_RCC_HSI_IsReady>:
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80022ac:	4b07      	ldr	r3, [pc, #28]	@ (80022cc <LL_RCC_HSI_IsReady+0x24>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022b8:	d101      	bne.n	80022be <LL_RCC_HSI_IsReady+0x16>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_RCC_HSI_IsReady+0x18>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000

080022d0 <LL_RCC_LSE_IsReady>:
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <LL_RCC_LSE_IsReady+0x24>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d101      	bne.n	80022e6 <LL_RCC_LSE_IsReady+0x16>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_RCC_LSE_IsReady+0x18>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000

080022f8 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b08      	cmp	r3, #8
 8002306:	d101      	bne.n	800230c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40021000 	.word	0x40021000

0800231c <LL_RCC_MSI_GetRange>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <LL_RCC_MSI_GetRange+0x18>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000

08002338 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800233c:	4b04      	ldr	r3, [pc, #16]	@ (8002350 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002342:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000

08002354 <LL_RCC_GetSysClkSource>:
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <LL_RCC_GetSysClkSource+0x18>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 030c 	and.w	r3, r3, #12
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000

08002370 <LL_RCC_GetAHBPrescaler>:
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002374:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <LL_RCC_GetAHBPrescaler+0x18>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000

0800238c <LL_RCC_GetAPB1Prescaler>:
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002390:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000

080023a8 <LL_RCC_GetAPB2Prescaler>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80023ac:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <LL_RCC_GetAPB2Prescaler+0x18>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000

080023c4 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <LL_RCC_GetUSARTClockSource+0x24>)
 80023ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	401a      	ands	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	041b      	lsls	r3, r3, #16
 80023da:	4313      	orrs	r3, r2
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000

080023ec <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <LL_RCC_GetUARTClockSource+0x24>)
 80023f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	401a      	ands	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	4313      	orrs	r3, r2
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <LL_RCC_PLL_GetMainSource+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0303 	and.w	r3, r3, #3
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002434:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <LL_RCC_PLL_GetN+0x18>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	0a1b      	lsrs	r3, r3, #8
 800243a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40021000 	.word	0x40021000

0800244c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002450:	4b04      	ldr	r3, [pc, #16]	@ (8002464 <LL_RCC_PLL_GetR+0x18>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000

08002468 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <LL_RCC_PLL_GetDivider+0x18>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000

08002484 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b03      	cmp	r3, #3
 8002494:	d137      	bne.n	8002506 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff ff94 	bl	80023c4 <LL_RCC_GetUSARTClockSource>
 800249c:	4603      	mov	r3, r0
 800249e:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	f200 80b3 	bhi.w	800260e <LL_RCC_GetUSARTClockFreq+0x18a>
 80024a8:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024ef 	.word	0x080024ef
 80024b4:	080024c1 	.word	0x080024c1
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	080024db 	.word	0x080024db
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80024c0:	f000 f956 	bl	8002770 <RCC_GetSystemClockFreq>
 80024c4:	60f8      	str	r0, [r7, #12]
        break;
 80024c6:	e0b3      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80024c8:	f7ff feee 	bl	80022a8 <LL_RCC_HSI_IsReady>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 809f 	beq.w	8002612 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 80024d4:	4b59      	ldr	r3, [pc, #356]	@ (800263c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80024d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024d8:	e09b      	b.n	8002612 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80024da:	f7ff fef9 	bl	80022d0 <LL_RCC_LSE_IsReady>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 8098 	beq.w	8002616 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 80024e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80024ec:	e093      	b.n	8002616 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80024ee:	f000 f93f 	bl	8002770 <RCC_GetSystemClockFreq>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f9cb 	bl	8002890 <RCC_GetHCLKClockFreq>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f9f1 	bl	80028e4 <RCC_GetPCLK2ClockFreq>
 8002502:	60f8      	str	r0, [r7, #12]
        break;
 8002504:	e094      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d146      	bne.n	800259a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff59 	bl	80023c4 <LL_RCC_GetUSARTClockSource>
 8002512:	4603      	mov	r3, r0
 8002514:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d87e      	bhi.n	800261a <LL_RCC_GetUSARTClockFreq+0x196>
 800251c:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002583 	.word	0x08002583
 8002528:	0800261b 	.word	0x0800261b
 800252c:	0800261b 	.word	0x0800261b
 8002530:	0800261b 	.word	0x0800261b
 8002534:	08002559 	.word	0x08002559
 8002538:	0800261b 	.word	0x0800261b
 800253c:	0800261b 	.word	0x0800261b
 8002540:	0800261b 	.word	0x0800261b
 8002544:	08002561 	.word	0x08002561
 8002548:	0800261b 	.word	0x0800261b
 800254c:	0800261b 	.word	0x0800261b
 8002550:	0800261b 	.word	0x0800261b
 8002554:	08002571 	.word	0x08002571
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002558:	f000 f90a 	bl	8002770 <RCC_GetSystemClockFreq>
 800255c:	60f8      	str	r0, [r7, #12]
        break;
 800255e:	e067      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002560:	f7ff fea2 	bl	80022a8 <LL_RCC_HSI_IsReady>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d059      	beq.n	800261e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 800256a:	4b34      	ldr	r3, [pc, #208]	@ (800263c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800256c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800256e:	e056      	b.n	800261e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002570:	f7ff feae 	bl	80022d0 <LL_RCC_LSE_IsReady>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d053      	beq.n	8002622 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 800257a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800257e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002580:	e04f      	b.n	8002622 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002582:	f000 f8f5 	bl	8002770 <RCC_GetSystemClockFreq>
 8002586:	4603      	mov	r3, r0
 8002588:	4618      	mov	r0, r3
 800258a:	f000 f981 	bl	8002890 <RCC_GetHCLKClockFreq>
 800258e:	4603      	mov	r3, r0
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f993 	bl	80028bc <RCC_GetPCLK1ClockFreq>
 8002596:	60f8      	str	r0, [r7, #12]
        break;
 8002598:	e04a      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b30      	cmp	r3, #48	@ 0x30
 800259e:	d147      	bne.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff0f 	bl	80023c4 <LL_RCC_GetUSARTClockSource>
 80025a6:	4603      	mov	r3, r0
 80025a8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80025ac:	d01a      	beq.n	80025e4 <LL_RCC_GetUSARTClockFreq+0x160>
 80025ae:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 80025b2:	d838      	bhi.n	8002626 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80025b4:	4a22      	ldr	r2, [pc, #136]	@ (8002640 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00c      	beq.n	80025d4 <LL_RCC_GetUSARTClockFreq+0x150>
 80025ba:	4a21      	ldr	r2, [pc, #132]	@ (8002640 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d832      	bhi.n	8002626 <LL_RCC_GetUSARTClockFreq+0x1a2>
 80025c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025c4:	d017      	beq.n	80025f6 <LL_RCC_GetUSARTClockFreq+0x172>
 80025c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002644 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d12c      	bne.n	8002626 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 80025cc:	f000 f8d0 	bl	8002770 <RCC_GetSystemClockFreq>
 80025d0:	60f8      	str	r0, [r7, #12]
          break;
 80025d2:	e02d      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 80025d4:	f7ff fe68 	bl	80022a8 <LL_RCC_HSI_IsReady>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d025      	beq.n	800262a <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80025e0:	60fb      	str	r3, [r7, #12]
          }
          break;
 80025e2:	e022      	b.n	800262a <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 80025e4:	f7ff fe74 	bl	80022d0 <LL_RCC_LSE_IsReady>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01f      	beq.n	800262e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 80025ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80025f2:	60fb      	str	r3, [r7, #12]
          }
          break;
 80025f4:	e01b      	b.n	800262e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80025f6:	f000 f8bb 	bl	8002770 <RCC_GetSystemClockFreq>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f947 	bl	8002890 <RCC_GetHCLKClockFreq>
 8002602:	4603      	mov	r3, r0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f959 	bl	80028bc <RCC_GetPCLK1ClockFreq>
 800260a:	60f8      	str	r0, [r7, #12]
          break;
 800260c:	e010      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800260e:	bf00      	nop
 8002610:	e00e      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002612:	bf00      	nop
 8002614:	e00c      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002616:	bf00      	nop
 8002618:	e00a      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800261a:	bf00      	nop
 800261c:	e008      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800261e:	bf00      	nop
 8002620:	e006      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002622:	bf00      	nop
 8002624:	e004      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800262e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	00f42400 	.word	0x00f42400
 8002640:	00300020 	.word	0x00300020
 8002644:	00300010 	.word	0x00300010

08002648 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002650:	2300      	movs	r3, #0
 8002652:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2bc0      	cmp	r3, #192	@ 0xc0
 8002658:	d13b      	bne.n	80026d2 <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fec6 	bl	80023ec <LL_RCC_GetUARTClockSource>
 8002660:	4603      	mov	r3, r0
 8002662:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8002666:	d01a      	beq.n	800269e <LL_RCC_GetUARTClockFreq+0x56>
 8002668:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 800266c:	d82c      	bhi.n	80026c8 <LL_RCC_GetUARTClockFreq+0x80>
 800266e:	4a3b      	ldr	r2, [pc, #236]	@ (800275c <LL_RCC_GetUARTClockFreq+0x114>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00c      	beq.n	800268e <LL_RCC_GetUARTClockFreq+0x46>
 8002674:	4a39      	ldr	r2, [pc, #228]	@ (800275c <LL_RCC_GetUARTClockFreq+0x114>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d826      	bhi.n	80026c8 <LL_RCC_GetUARTClockFreq+0x80>
 800267a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800267e:	d017      	beq.n	80026b0 <LL_RCC_GetUARTClockFreq+0x68>
 8002680:	4a37      	ldr	r2, [pc, #220]	@ (8002760 <LL_RCC_GetUARTClockFreq+0x118>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d120      	bne.n	80026c8 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002686:	f000 f873 	bl	8002770 <RCC_GetSystemClockFreq>
 800268a:	60f8      	str	r0, [r7, #12]
        break;
 800268c:	e021      	b.n	80026d2 <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800268e:	f7ff fe0b 	bl	80022a8 <LL_RCC_HSI_IsReady>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d019      	beq.n	80026cc <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 8002698:	4b32      	ldr	r3, [pc, #200]	@ (8002764 <LL_RCC_GetUARTClockFreq+0x11c>)
 800269a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800269c:	e016      	b.n	80026cc <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800269e:	f7ff fe17 	bl	80022d0 <LL_RCC_LSE_IsReady>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 80026a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ac:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026ae:	e00f      	b.n	80026d0 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80026b0:	f000 f85e 	bl	8002770 <RCC_GetSystemClockFreq>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f8ea 	bl	8002890 <RCC_GetHCLKClockFreq>
 80026bc:	4603      	mov	r3, r0
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 f8fc 	bl	80028bc <RCC_GetPCLK1ClockFreq>
 80026c4:	60f8      	str	r0, [r7, #12]
        break;
 80026c6:	e004      	b.n	80026d2 <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 80026c8:	bf00      	nop
 80026ca:	e002      	b.n	80026d2 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 80026d0:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026d8:	d13b      	bne.n	8002752 <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fe86 	bl	80023ec <LL_RCC_GetUARTClockSource>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80026e6:	d01a      	beq.n	800271e <LL_RCC_GetUARTClockFreq+0xd6>
 80026e8:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 80026ec:	d82c      	bhi.n	8002748 <LL_RCC_GetUARTClockFreq+0x100>
 80026ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <LL_RCC_GetUARTClockFreq+0x120>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d00c      	beq.n	800270e <LL_RCC_GetUARTClockFreq+0xc6>
 80026f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <LL_RCC_GetUARTClockFreq+0x120>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d826      	bhi.n	8002748 <LL_RCC_GetUARTClockFreq+0x100>
 80026fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026fe:	d017      	beq.n	8002730 <LL_RCC_GetUARTClockFreq+0xe8>
 8002700:	4a1a      	ldr	r2, [pc, #104]	@ (800276c <LL_RCC_GetUARTClockFreq+0x124>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d120      	bne.n	8002748 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002706:	f000 f833 	bl	8002770 <RCC_GetSystemClockFreq>
 800270a:	60f8      	str	r0, [r7, #12]
        break;
 800270c:	e021      	b.n	8002752 <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800270e:	f7ff fdcb 	bl	80022a8 <LL_RCC_HSI_IsReady>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d019      	beq.n	800274c <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8002718:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <LL_RCC_GetUARTClockFreq+0x11c>)
 800271a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800271c:	e016      	b.n	800274c <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800271e:	f7ff fdd7 	bl	80022d0 <LL_RCC_LSE_IsReady>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d013      	beq.n	8002750 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8002728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800272c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800272e:	e00f      	b.n	8002750 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002730:	f000 f81e 	bl	8002770 <RCC_GetSystemClockFreq>
 8002734:	4603      	mov	r3, r0
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f8aa 	bl	8002890 <RCC_GetHCLKClockFreq>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f8bc 	bl	80028bc <RCC_GetPCLK1ClockFreq>
 8002744:	60f8      	str	r0, [r7, #12]
        break;
 8002746:	e004      	b.n	8002752 <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8002748:	bf00      	nop
 800274a:	e002      	b.n	8002752 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 800274c:	bf00      	nop
 800274e:	e000      	b.n	8002752 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 8002750:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8002752:	68fb      	ldr	r3, [r7, #12]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	00c00080 	.word	0x00c00080
 8002760:	00c00040 	.word	0x00c00040
 8002764:	00f42400 	.word	0x00f42400
 8002768:	03000200 	.word	0x03000200
 800276c:	03000100 	.word	0x03000100

08002770 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002776:	f7ff fded 	bl	8002354 <LL_RCC_GetSysClkSource>
 800277a:	4603      	mov	r3, r0
 800277c:	2b0c      	cmp	r3, #12
 800277e:	d851      	bhi.n	8002824 <RCC_GetSystemClockFreq+0xb4>
 8002780:	a201      	add	r2, pc, #4	@ (adr r2, 8002788 <RCC_GetSystemClockFreq+0x18>)
 8002782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002786:	bf00      	nop
 8002788:	080027bd 	.word	0x080027bd
 800278c:	08002825 	.word	0x08002825
 8002790:	08002825 	.word	0x08002825
 8002794:	08002825 	.word	0x08002825
 8002798:	08002811 	.word	0x08002811
 800279c:	08002825 	.word	0x08002825
 80027a0:	08002825 	.word	0x08002825
 80027a4:	08002825 	.word	0x08002825
 80027a8:	08002817 	.word	0x08002817
 80027ac:	08002825 	.word	0x08002825
 80027b0:	08002825 	.word	0x08002825
 80027b4:	08002825 	.word	0x08002825
 80027b8:	0800281d 	.word	0x0800281d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80027bc:	f7ff fd9c 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d111      	bne.n	80027ea <RCC_GetSystemClockFreq+0x7a>
 80027c6:	f7ff fd97 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d004      	beq.n	80027da <RCC_GetSystemClockFreq+0x6a>
 80027d0:	f7ff fda4 	bl	800231c <LL_RCC_MSI_GetRange>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	e003      	b.n	80027e2 <RCC_GetSystemClockFreq+0x72>
 80027da:	f7ff fdad 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 80027de:	4603      	mov	r3, r0
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	4a28      	ldr	r2, [pc, #160]	@ (8002884 <RCC_GetSystemClockFreq+0x114>)
 80027e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e8:	e010      	b.n	800280c <RCC_GetSystemClockFreq+0x9c>
 80027ea:	f7ff fd85 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <RCC_GetSystemClockFreq+0x8e>
 80027f4:	f7ff fd92 	bl	800231c <LL_RCC_MSI_GetRange>
 80027f8:	4603      	mov	r3, r0
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	e003      	b.n	8002806 <RCC_GetSystemClockFreq+0x96>
 80027fe:	f7ff fd9b 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 8002802:	4603      	mov	r3, r0
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <RCC_GetSystemClockFreq+0x114>)
 8002808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800280e:	e033      	b.n	8002878 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <RCC_GetSystemClockFreq+0x118>)
 8002812:	607b      	str	r3, [r7, #4]
      break;
 8002814:	e030      	b.n	8002878 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <RCC_GetSystemClockFreq+0x11c>)
 8002818:	607b      	str	r3, [r7, #4]
      break;
 800281a:	e02d      	b.n	8002878 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800281c:	f000 f876 	bl	800290c <RCC_PLL_GetFreqDomain_SYS>
 8002820:	6078      	str	r0, [r7, #4]
      break;
 8002822:	e029      	b.n	8002878 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002824:	f7ff fd68 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d111      	bne.n	8002852 <RCC_GetSystemClockFreq+0xe2>
 800282e:	f7ff fd63 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <RCC_GetSystemClockFreq+0xd2>
 8002838:	f7ff fd70 	bl	800231c <LL_RCC_MSI_GetRange>
 800283c:	4603      	mov	r3, r0
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	e003      	b.n	800284a <RCC_GetSystemClockFreq+0xda>
 8002842:	f7ff fd79 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 8002846:	4603      	mov	r3, r0
 8002848:	0a1b      	lsrs	r3, r3, #8
 800284a:	4a0e      	ldr	r2, [pc, #56]	@ (8002884 <RCC_GetSystemClockFreq+0x114>)
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	e010      	b.n	8002874 <RCC_GetSystemClockFreq+0x104>
 8002852:	f7ff fd51 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d004      	beq.n	8002866 <RCC_GetSystemClockFreq+0xf6>
 800285c:	f7ff fd5e 	bl	800231c <LL_RCC_MSI_GetRange>
 8002860:	4603      	mov	r3, r0
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	e003      	b.n	800286e <RCC_GetSystemClockFreq+0xfe>
 8002866:	f7ff fd67 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 800286a:	4603      	mov	r3, r0
 800286c:	091b      	lsrs	r3, r3, #4
 800286e:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <RCC_GetSystemClockFreq+0x114>)
 8002870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002874:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002876:	bf00      	nop
  }

  return frequency;
 8002878:	687b      	ldr	r3, [r7, #4]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	08002d90 	.word	0x08002d90
 8002888:	00f42400 	.word	0x00f42400
 800288c:	007a1200 	.word	0x007a1200

08002890 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002898:	f7ff fd6a 	bl	8002370 <LL_RCC_GetAHBPrescaler>
 800289c:	4603      	mov	r3, r0
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <RCC_GetHCLKClockFreq+0x28>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	461a      	mov	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	40d3      	lsrs	r3, r2
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	08002d78 	.word	0x08002d78

080028bc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80028c4:	f7ff fd62 	bl	800238c <LL_RCC_GetAPB1Prescaler>
 80028c8:	4603      	mov	r3, r0
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <RCC_GetPCLK1ClockFreq+0x24>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	461a      	mov	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	40d3      	lsrs	r3, r2
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	08002d88 	.word	0x08002d88

080028e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80028ec:	f7ff fd5c 	bl	80023a8 <LL_RCC_GetAPB2Prescaler>
 80028f0:	4603      	mov	r3, r0
 80028f2:	0adb      	lsrs	r3, r3, #11
 80028f4:	4a04      	ldr	r2, [pc, #16]	@ (8002908 <RCC_GetPCLK2ClockFreq+0x24>)
 80028f6:	5cd3      	ldrb	r3, [r2, r3]
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	40d3      	lsrs	r3, r2
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	08002d88 	.word	0x08002d88

0800290c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002912:	f7ff fd7f 	bl	8002414 <LL_RCC_PLL_GetMainSource>
 8002916:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d036      	beq.n	800298c <RCC_PLL_GetFreqDomain_SYS+0x80>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d836      	bhi.n	8002992 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d003      	beq.n	8002932 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d02a      	beq.n	8002986 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002930:	e02f      	b.n	8002992 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002932:	f7ff fce1 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d111      	bne.n	8002960 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800293c:	f7ff fcdc 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002946:	f7ff fce9 	bl	800231c <LL_RCC_MSI_GetRange>
 800294a:	4603      	mov	r3, r0
 800294c:	0a1b      	lsrs	r3, r3, #8
 800294e:	e003      	b.n	8002958 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8002950:	f7ff fcf2 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 8002954:	4603      	mov	r3, r0
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	4a2f      	ldr	r2, [pc, #188]	@ (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800295a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800295e:	e010      	b.n	8002982 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8002960:	f7ff fcca 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800296a:	f7ff fcd7 	bl	800231c <LL_RCC_MSI_GetRange>
 800296e:	4603      	mov	r3, r0
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	e003      	b.n	800297c <RCC_PLL_GetFreqDomain_SYS+0x70>
 8002974:	f7ff fce0 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 8002978:	4603      	mov	r3, r0
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002984:	e02f      	b.n	80029e6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002986:	4b25      	ldr	r3, [pc, #148]	@ (8002a1c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8002988:	607b      	str	r3, [r7, #4]
      break;
 800298a:	e02c      	b.n	80029e6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 800298e:	607b      	str	r3, [r7, #4]
      break;
 8002990:	e029      	b.n	80029e6 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002992:	f7ff fcb1 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d111      	bne.n	80029c0 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 800299c:	f7ff fcac 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d004      	beq.n	80029b0 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80029a6:	f7ff fcb9 	bl	800231c <LL_RCC_MSI_GetRange>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	e003      	b.n	80029b8 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80029b0:	f7ff fcc2 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80029ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029be:	e010      	b.n	80029e2 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80029c0:	f7ff fc9a 	bl	80022f8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d004      	beq.n	80029d4 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80029ca:	f7ff fca7 	bl	800231c <LL_RCC_MSI_GetRange>
 80029ce:	4603      	mov	r3, r0
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	e003      	b.n	80029dc <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80029d4:	f7ff fcb0 	bl	8002338 <LL_RCC_MSI_GetRangeAfterStandby>
 80029d8:	4603      	mov	r3, r0
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002a18 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80029de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80029e4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80029e6:	f7ff fd3f 	bl	8002468 <LL_RCC_PLL_GetDivider>
 80029ea:	4603      	mov	r3, r0
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	3301      	adds	r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	fbb2 f4f3 	udiv	r4, r2, r3
 80029f6:	f7ff fd1b 	bl	8002430 <LL_RCC_PLL_GetN>
 80029fa:	4603      	mov	r3, r0
 80029fc:	fb03 f404 	mul.w	r4, r3, r4
 8002a00:	f7ff fd24 	bl	800244c <LL_RCC_PLL_GetR>
 8002a04:	4603      	mov	r3, r0
 8002a06:	0e5b      	lsrs	r3, r3, #25
 8002a08:	3301      	adds	r3, #1
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	08002d90 	.word	0x08002d90
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	007a1200 	.word	0x007a1200

08002a24 <LL_USART_IsEnabled>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <LL_USART_IsEnabled+0x18>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <LL_USART_IsEnabled+0x1a>
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <LL_USART_SetStopBitsLength>:
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	605a      	str	r2, [r3, #4]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_USART_SetHWFlowCtrl>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	609a      	str	r2, [r3, #8]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <LL_USART_SetBaudRate>:
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aaa:	d11a      	bne.n	8002ae2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	005a      	lsls	r2, r3, #1
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	441a      	add	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	60da      	str	r2, [r3, #12]
}
 8002ae0:	e00a      	b.n	8002af8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	085a      	lsrs	r2, r3, #1
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	441a      	add	r2, r3
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff84 	bl	8002a24 <LL_USART_IsEnabled>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d15b      	bne.n	8002bda <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b2f      	ldr	r3, [pc, #188]	@ (8002be4 <LL_USART_Init+0xe0>)
 8002b28:	4013      	ands	r3, r2
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	6851      	ldr	r1, [r2, #4]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	4311      	orrs	r1, r2
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	6912      	ldr	r2, [r2, #16]
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	6992      	ldr	r2, [r2, #24]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f7ff ff7c 	bl	8002a4a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff89 	bl	8002a70 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a21      	ldr	r2, [pc, #132]	@ (8002be8 <LL_USART_Init+0xe4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d104      	bne.n	8002b70 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002b66:	2003      	movs	r0, #3
 8002b68:	f7ff fc8c 	bl	8002484 <LL_RCC_GetUSARTClockFreq>
 8002b6c:	60b8      	str	r0, [r7, #8]
 8002b6e:	e023      	b.n	8002bb8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <LL_USART_Init+0xe8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d104      	bne.n	8002b82 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002b78:	200c      	movs	r0, #12
 8002b7a:	f7ff fc83 	bl	8002484 <LL_RCC_GetUSARTClockFreq>
 8002b7e:	60b8      	str	r0, [r7, #8]
 8002b80:	e01a      	b.n	8002bb8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf0 <LL_USART_Init+0xec>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d104      	bne.n	8002b94 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002b8a:	2030      	movs	r0, #48	@ 0x30
 8002b8c:	f7ff fc7a 	bl	8002484 <LL_RCC_GetUSARTClockFreq>
 8002b90:	60b8      	str	r0, [r7, #8]
 8002b92:	e011      	b.n	8002bb8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <LL_USART_Init+0xf0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d104      	bne.n	8002ba6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002b9c:	20c0      	movs	r0, #192	@ 0xc0
 8002b9e:	f7ff fd53 	bl	8002648 <LL_RCC_GetUARTClockFreq>
 8002ba2:	60b8      	str	r0, [r7, #8]
 8002ba4:	e008      	b.n	8002bb8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <LL_USART_Init+0xf4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d104      	bne.n	8002bb8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002bae:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8002bb2:	f7ff fd49 	bl	8002648 <LL_RCC_GetUARTClockFreq>
 8002bb6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00d      	beq.n	8002bda <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff5e 	bl	8002a96 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	efff69f3 	.word	0xefff69f3
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40004400 	.word	0x40004400
 8002bf0:	40004800 	.word	0x40004800
 8002bf4:	40004c00 	.word	0x40004c00
 8002bf8:	40005000 	.word	0x40005000

08002bfc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0e:	4a07      	ldr	r2, [pc, #28]	@ (8002c2c <LL_InitTick+0x30>)
 8002c10:	3b01      	subs	r3, #1
 8002c12:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002c14:	4b05      	ldr	r3, [pc, #20]	@ (8002c2c <LL_InitTick+0x30>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1a:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <LL_InitTick+0x30>)
 8002c1c:	2205      	movs	r2, #5
 8002c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000e010 	.word	0xe000e010

08002c30 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002c38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ffdd 	bl	8002bfc <LL_InitTick>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002c54:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <LL_mDelay+0x4c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002c5e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c66:	d00c      	beq.n	8002c82 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002c6e:	e008      	b.n	8002c82 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002c70:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <LL_mDelay+0x4c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1f3      	bne.n	8002c70 <LL_mDelay+0x24>
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	e000e010 	.word	0xe000e010

08002c9c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002ca4:	4a04      	ldr	r2, [pc, #16]	@ (8002cb8 <LL_SetSystemCoreClock+0x1c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000000 	.word	0x20000000

08002cbc <isalpha>:
 8002cbc:	4b02      	ldr	r3, [pc, #8]	@ (8002cc8 <isalpha+0xc>)
 8002cbe:	4403      	add	r3, r0
 8002cc0:	7858      	ldrb	r0, [r3, #1]
 8002cc2:	f000 0003 	and.w	r0, r0, #3
 8002cc6:	4770      	bx	lr
 8002cc8:	08002dc0 	.word	0x08002dc0

08002ccc <__libc_init_array>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	4d0d      	ldr	r5, [pc, #52]	@ (8002d04 <__libc_init_array+0x38>)
 8002cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8002d08 <__libc_init_array+0x3c>)
 8002cd2:	1b64      	subs	r4, r4, r5
 8002cd4:	10a4      	asrs	r4, r4, #2
 8002cd6:	2600      	movs	r6, #0
 8002cd8:	42a6      	cmp	r6, r4
 8002cda:	d109      	bne.n	8002cf0 <__libc_init_array+0x24>
 8002cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8002d0c <__libc_init_array+0x40>)
 8002cde:	4c0c      	ldr	r4, [pc, #48]	@ (8002d10 <__libc_init_array+0x44>)
 8002ce0:	f000 f818 	bl	8002d14 <_init>
 8002ce4:	1b64      	subs	r4, r4, r5
 8002ce6:	10a4      	asrs	r4, r4, #2
 8002ce8:	2600      	movs	r6, #0
 8002cea:	42a6      	cmp	r6, r4
 8002cec:	d105      	bne.n	8002cfa <__libc_init_array+0x2e>
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cf4:	4798      	blx	r3
 8002cf6:	3601      	adds	r6, #1
 8002cf8:	e7ee      	b.n	8002cd8 <__libc_init_array+0xc>
 8002cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfe:	4798      	blx	r3
 8002d00:	3601      	adds	r6, #1
 8002d02:	e7f2      	b.n	8002cea <__libc_init_array+0x1e>
 8002d04:	08002ecc 	.word	0x08002ecc
 8002d08:	08002ecc 	.word	0x08002ecc
 8002d0c:	08002ecc 	.word	0x08002ecc
 8002d10:	08002ed0 	.word	0x08002ed0

08002d14 <_init>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr

08002d20 <_fini>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr
